/* DATA BASE CREATION  */
-- YOUR SQL CODE HERE TO BUILD CREATE SCHEMAS, TABLES, ETC
CREATE TABLE StagingTrips (
    TRIP_ID VARCHAR(255),
    CALL_TYPE VARCHAR(255),
    ORIGIN_CALL VARCHAR(255),
    ORIGIN_STAND VARCHAR(255),
    TAXI_ID VARCHAR(255),
    TIMESTAMP VARCHAR(255),
    DAYTYPE VARCHAR(255),
    MISSING_DATA VARCHAR(255),
    POLYLINE TEXT
);

CREATE TABLE Trips (
    TRIP_ID VARCHAR(255),
    CALL_TYPE CHAR(1),
    ORIGIN_CALL INTEGER,
    ORIGIN_STAND INTEGER,
    TAXI_ID INTEGER,
    TIMESTAMP INTEGER,
    DAYTYPE CHAR(1),
    MISSING_DATA BOOLEAN,
    POLYLINE TEXT
);


SELECT
    COUNT(CASE WHEN TRIP_ID = '' THEN 1 END) AS empty_trip_id,
    COUNT(CASE WHEN CALL_TYPE = '' THEN 1 END) AS empty_call_type,
    COUNT(CASE WHEN ORIGIN_CALL = '' THEN 1 END) AS empty_origin_call,
    COUNT(CASE WHEN ORIGIN_STAND = '' THEN 1 END) AS empty_origin_stand,
    COUNT(CASE WHEN TAXI_ID = '' THEN 1 END) AS empty_taxi_id,
    COUNT(CASE WHEN TIMESTAMP = '' THEN 1 END) AS empty_timestamp,
    COUNT(CASE WHEN DAYTYPE = '' THEN 1 END) AS empty_daytype,
    COUNT(CASE WHEN MISSING_DATA = '' THEN 1 END) AS empty_missing_data,
    COUNT(CASE WHEN POLYLINE = '' THEN 1 END) AS empty_polyline
FROM
    StagingTrips;

UPDATE stagingtrips
SET 
    TRIP_ID = NULLIF(TRIM(TRIP_ID), ''),
    CALL_TYPE = NULLIF(TRIM(CALL_TYPE), ''),
    ORIGIN_CALL = NULLIF(TRIM(ORIGIN_CALL), ''),
    ORIGIN_STAND = NULLIF(TRIM(ORIGIN_STAND), ''),
    TAXI_ID = NULLIF(TRIM(TAXI_ID), ''),
    TIMESTAMP = NULLIF(TRIM(TIMESTAMP), ''),
    DAYTYPE = NULLIF(TRIM(DAYTYPE), ''),
    MISSING_DATA = NULLIF(TRIM(MISSING_DATA), ''),
    POLYLINE = NULLIF(TRIM(POLYLINE), '')
WHERE
    TRIP_ID = '' OR CALL_TYPE = '' OR ORIGIN_CALL = '' OR ORIGIN_STAND = '' OR TAXI_ID = '' OR TIMESTAMP = '' OR DAYTYPE = '' OR MISSING_DATA = '' OR POLYLINE = '';

-- Move from staging to real table
INSERT INTO trips (TRIP_ID, CALL_TYPE, ORIGIN_CALL, ORIGIN_STAND, TAXI_ID, TIMESTAMP, DAYTYPE, MISSING_DATA, POLYLINE)
SELECT TRIP_ID, CALL_TYPE, CAST(ORIGIN_CALL AS INTEGER), CAST(ORIGIN_STAND AS INTEGER), CAST(TAXI_ID AS INTEGER), CAST(TIMESTAMP AS INTEGER), DAYTYPE, CAST(MISSING_DATA AS BOOLEAN), POLYLINE
FROM stagingtrips;

-- DROP STAGING TABLE
DROP TABLE IF EXISTS stagingtrips

-- Add column for linestring
ALTER TABLE trips ADD COLUMN line_geom GEOMETRY(LineString);

-- Add data to linestring column
UPDATE trips
SET line_geom = ST_SetSRID(ST_MakeLine(
    ARRAY(
        SELECT ST_MakePoint((coord->>0)::DOUBLE PRECISION, (coord->>1)::DOUBLE PRECISION)
        FROM json_array_elements(polyline::json) AS coord
    )
), 4326);

-- ADD trip_id as primary key
ALTER TABLE trips
ADD PRIMARY KEY (trip_id)

-- DELETE data (id gained from preprocessing)
DELETE
FROM trips
WHERE trip_id IN ('1372636951620000320', '1372637754620000007', '1372646419620000372', '1372652766620000534', '1372650736620000012', '1372656241620000539', '1372657983620000190', '1372662421620000304', '1372663487620000268', '1372663640620000319', '1372663871620000085', '1372666721620000057', '1372666327620000120', '1372665435620000159', '1372665674620000021', '1372667799620000050', '1372666258620000049', '1372668421620000093', '1372668303620000256', '1372669656620000184', '1372669111620000372', '1372670813620000520', '1372669475620000053', '1372668882620000101', '1372670449620000195', '1372668878620000605', '1372673432620000488', '1372674205620000021', '1372674065620000687', '1372674099620000352', '1372675341620000076', '1372654104620000657', '1372675194620000057', '1372676289620000492', '1372676062620000330', '1372674636620000226', '1372671958620000386', '1372674172620000161', '1372672917620000017', '1372681846620000657', '1372678851620000190', '1372677642620000516', '1372681523620000620', '1372677193620000163', '1372672472620000539', '1372681678620000680', '1372678010620000144', '1372676620620000589', '1372678236620000419', '1372671478620000408', '1372684043620000539', '1372688642620000403', '1372683304620000042', '1372688910620000076', '1372677750620000045', '1372676663620000347', '1372687908620000142', '1372682370620000327', '1372687931620000529', '1372686531620000055', '1372688249620000372', '1372691990620000177', '1372690949620000172', '1372693880620000607', '1372663738620000351', '1372690882620000068', '1372695505620000108', '1372694023620000370', '1372693179620000123', '1372687551620000465', '1372688492620000207', '1372693356620000426', '1372691060620000051', '1372691748620000089', '1372699494620000118', '1372705613620000095', '1372699980620000392', '1372705844620000113', '1372704457620000148', '1372703752620000686', '1372685258620000541', '1372706576620000688', '1372704205620000050', '1372707686620000351', '1372704956620000304', '1372710665620000446', '1372693129620000589', '1372701407620000520', '1372703612620000233', '1372711714620000554', '1372715760620000199', '1372713435620000455', '1372715687620000013', '1372716430620000488', '1372724277620000089', '1372736958620000351', '1372737360620000678', '1372739525620000463', '1372738964620000600', '1372739730620000450', '1372742950620000600', '1372741036620000446', '1372738214620000015', '1372724342620000363', '1372698360620000068', '1372744608620000190', '1372665682620000084', '1372717190620000388', '1372750906620000363', '1372751876620000077', '1372685306620000499', '1372747633620000276', '1372753056620000672', '1372753826620000473', '1372755767620000195', '1372755626620000160', '1372753008620000054', '1372712342620000327', '1372756556620000222', '1372755261620000576', '1372759610620000051', '1372759748620000363', '1372760236620000109', '1372761387620000623', '1372714689620000448', '1372765834620000156', '1372760349620000092', '1372764273620000476', '1372765225620000363', '1372766972620000081', '1372764603620000410', '1372768831620000671', '1372768700620000333', '1372764663620000076', '1372764606620000109', '1372772898620000518', '1372762737620000224', '1372765916620000195', '1372769432620000303', '1372774527620000167', '1372769910620000247', '1372773099620000281', '1372778051620000386', '1372778548620000386', '1372776112620000126', '1372771811620000023', '1372776220620000527', '1372775849620000693', '1372779332620000207', '1372778061620000179', '1372780462620000562', '1372781555620000571', '1372759230620000668', '1372785354620000100', '1372788951620000419', '1372786278620000304', '1372787786620000576', '1372788737620000509', '1372792173620000576', '1372787817620000334', '1372784605620000311', '1372791313620000304', '1372801116620000363', '1372801975620000619', '1372803267620000297', '1372802892620000577', '1372807446620000157', '1372813056620000387', '1372776146620000320', '1372829789620000904', '1372777633620000136', '1372829131620000189', '1372789717620000271', '1372798020620000222', '1372829189620000488', '1372832762620000231', '1372833646620000534', '1372838219620000381', '1372838912620000007', '1372839417620000450', '1372840070620000602', '1372841688620000693', '1372840873620000009', '1372828355620000463', '1372841683620000616', '1372840577620000562', '1372840387620000159', '1372842997620000372', '1372842865620000347', '1372847026620000140', '1372849592620000163', '1372844312620000476', '1372840061620000166', '1372846313620000263', '1372850948620000077', '1372782498620000513', '1372853347620000199', '1372853907620000680', '1372852061620000166', '1372849855620000084', '1372852236620000138', '1372856725620000370', '1372846640620000473', '1372858489620000408', '1372858485620000153', '1372858830620000199', '1372855449620000268', '1372861622620000516', '1372860535620000136', '1372850551620000017', '1372847955620000902', '1372848629620000057', '1372856991620000009', '1372858740620000343', '1372864121620000400', '1372862742620000658', '1372861913620000376', '1372863901620000334', '1372868808620000403', '1372869860620000129', '1372874593620000005', '1372868067620000303', '1372868043620000017', '1372874199620000586', '1372883600620000901', '1372883686620000023', '1372887525620000497', '1372889325620000363', '1372886523620000618', '1372894099620000514', '1372898176620000434', '1372896095620000678', '1372900443620000684', '1372894484620000233', '1372898090620000481', '1372892498620000387', '1372889431620000901', '1372862438620000432', '1372911908620000320', '1372914855620000304', '1372912376620000678', '1372916403620000395', '1372916652620000077', '1372913543620000527', '1372919325620000562', '1372904263620000363', '1372879596620000326', '1372916608620000529', '1372874934620000464', '1372872812620000018', '1372871034620000588', '1372876241620000693', '1372907552620000488', '1372923634620000662', '1372925265620000152', '1372925816620000440', '1372924602620000901', '1372922488620000349', '1372928108620000540', '1372929417620000249', '1372932831620000080', '1372930600620000900', '1372931821620000363', '1372931855620000022', '1372929904620000634', '1372931101620000334', '1372932154620000436', '1372928502620000588', '1372933219620000516', '1372933444620000486', '1372937805620000160', '1372930625620000206', '1372938908620000476', '1372937989620000001', '1372934216620000342', '1372939350620000484', '1372939697620000352', '1372941373620000680', '1372941297620000136', '1372943057620000120', '1372935824620000294', '1372942912620000504', '1372947181620000513', '1372947688620000118', '1372944406620000525', '1372949256620000080', '1372950145620000094', '1372940590620000137', '1372948758620000118', '1372947710620000126', '1372938994620000044', '1372949249620000120', '1372934636620000178', '1372950024620000446', '1372949472620000101', '1372948291620000171', '1372953420620000494', '1372949809620000129', '1372952408620000060', '1372953946620000363', '1372955089620000351', '1372956895620000597', '1372956281620000174', '1372958299620000392', '1372963772620000557', '1372945527620000206', '1372963195620000384', '1372955904620000256', '1372969228620000295', '1372968388620000129', '1372968406620000370', '1372956565620000363', '1372968241620000624', '1372965417620000446', '1372974533620000160', '1372977506620000611', '1372970475620000136', '1372980375620000483', '1372979777620000167', '1372973476620000372', '1372981651620000678', '1372977460620000345', '1372986478620000611', '1372975305620000276', '1372961031620000239', '1372985324620000280', '1372986240620000105', '1372993237620000395', '1372998245620000506', '1372994925620000596', '1372996000620000233', '1372999788620000477', '1372965626620000188', '1373001013620000153', '1373001229620000625', '1373000744620000542', '1372946218620000651', '1373006727620000625', '1372958814620000001', '1373006214620000562', '1372999219620000434', '1373004674620000254', '1372997743620000022', '1373007707620000561', '1373008501620000695', '1373010109620000605', '1373011325620000249', '1373006449620000633', '1373012776620000163', '1373001699620000007', '1373013193620000904', '1373010921620000342', '1372960274620000159', '1373011022620000334', '1373011816620000496', '1373014679620000351', '1373015866620000473', '1373012806620000324', '1373014629620000678', '1373015832620000199', '1373017279620000334', '1373015545620000345', '1373016869620000017', '1373017664620000455', '1372968806620000055', '1373020562620000245', '1373009757620000623', '1373015784620000289', '1373019383620000504', '1373018671620000343', '1373019164620000006', '1373016663620000434', '1373017863620000280', '1373021478620000207', '1373023015620000516', '1373018984620000432', '1373017534620000540', '1373018139620000361', '1373018989620000651', '1373022658620000608', '1373023166620000356', '1373026265620000386', '1373022459620000229', '1373027170620000305', '1373023614620000436', '1373027758620000229', '1373012289620000206', '1373027053620000632', '1373016132620000159', '1373028004620000120', '1373021541620000455', '1373028266620000546', '1373030941620000363', '1373023981620000207', '1373028845620000226', '1373026787620000619', '1373031825620000242', '1373031329620000605', '1373024871620000432', '1373031441620000455', '1373030421620000235', '1373028490620000452', '1373034072620000653', '1373034282620000367', '1373035351620000388', '1372969251620000250', '1373033898620000334', '1373038708620000452', '1373035064620000589', '1373034348620000542', '1373034621620000671', '1373034757620000224', '1373040769620000258', '1373038656620000363', '1373040483620000668', '1373038538620000030', '1373039825620000345', '1373040393620000542', '1373040116620000658', '1373043212620000261', '1373040605620000343', '1373042511620000391', '1373031715620000040', '1373042857620000591', '1373041095620000144', '1373040891620000319', '1373040183620000576', '1373043932620000345', '1373033911620000160', '1373046010620000009', '1373045390620000634', '1373045916620000083', '1373051734620000901', '1373051163620000588', '1373043020620000649', '1373050971620000177', '1373053003620000480', '1373052105620000561', '1373051092620000431', '1373051093620000343', '1373051848620000367', '1373049816620000276', '1373051660620000372', '1373002337620000338', '1373054667620000403', '1373055254620000668', '1373059531620000026', '1373056881620000604', '1373013841620000453', '1373060012620000060', '1373060176620000554', '1373056757620000571', '1373062210620000013', '1373060297620000303', '1373065281620000167', '1373062800620000453', '1373067833620000347', '1373068182620000488', '1373067980620000157', '1373067600620000610', '1373069808620000311', '1373071162620000243', '1373069007620000514', '1373071992620000216', '1373070753620000610', '1373074357620000081', '1373075230620000665', '1373074949620000496', '1373042853620000104', '1373079034620000598', '1373080559620000166', '1373082159620000395', '1373082583620000273', '1373081864620000351', '1373081790620000011', '1373083724620000477', '1373083001620000325', '1373083489620000364', '1373045322620000565', '1373085238620000036', '1373081641620000463', '1373086195620000534', '1373085709620000434', '1373089796620000610', '1373090844620000434', '1373093472620000276', '1373021347620000623', '1373091201620000506', '1373041291620000289', '1373017412620000072', '1373095967620000436', '1373099371620000039', '1373097949620000539', '1373088134620000458', '1373101082620000276', '1373101841620000256', '1373102651620000142', '1373106521620000693', '1373102046620000421', '1373108567620000104', '1373108961620000657', '1373108411620000342', '1373105141620000085', '1373111581620000285', '1373116582620000258', '1373107822620000569', '1373118905620000468', '1373116903620000363', '1373120389620000242', '1373120096620000006', '1373084489620000022', '1373119484620000633', '1373108503620000351', '1373123442620000400', '1373128839620000430', '1373120538620000569', '1373128220620000137', '1373124266620000250', '1373122369620000229', '1373128699620000600', '1373131507620000250', '1373133734620000239', '1373051444620000095', '1373135822620000524', '1373133462620000620', '1373137215620000276', '1373136939620000067', '1373138711620000351', '1373142312620000626', '1373141972620000273', '1373144282620000039', '1373147769620000436', '1373131816620000295', '1373146478620000157', '1373146766620000446', '1373148681620000658', '1373146557620000337', '1373145645620000384', '1373144089620000160', '1373150290620000554', '1373149959620000387', '1373151662620000324', '1373142616620000276', '1373135134620000367', '1373152727620000260', '1373151118620000011', '1373150182620000245', '1373156494620000687', '1373157803620000263', '1373158760620000372', '1373156985620000554', '1373158064620000494', '1373155387620000308', '1373157189620000686', '1373162007620000669', '1373164777620000285', '1373162972620000252', '1373168697620000359', '1373167760620000367', '1373168993620000506', '1373160519620000002', '1373171062620000588', '1373172306620000260', '1373167374620000436', '1373169998620000434', '1373171015620000435', '1373169818620000276', '1373170741620000108', '1373168588620000611', '1373169043620000633', '1373170108620000598', '1373172150620000011', '1373172052620000328', '1373172110620000166', '1373171421620000596', '1373171998620000460', '1373172316620000588', '1373172578620000612', '1373141257620000408', '1373173068620000197', '1373175634620000321', '1373169986620000341', '1373174473620000077', '1373175329620000513', '1373176264620000403', '1373176585620000561', '1373173309620000440', '1373175795620000623', '1373179263620000242', '1373173288620000508', '1373179461620000263', '1373177476620000496', '1373179977620000304', '1373180845620000051', '1373176643620000255', '1373167478620000560', '1373099881620000361', '1373179253620000440', '1373171054620000684', '1373046248620000001', '1373130851620000222', '1373186632620000901', '1373186944620000272', '1373186888620000129', '1373190168620000276', '1373193861620000198', '1373194189620000190', '1373194803620000007', '1373197724620000393', '1373194570620000344', '1373199208620000561', '1373198326620000245', '1373203392620000464', '1373202237620000177', '1373203515620000173', '1373206268620000101', '1373207132620000356', '1373209589620000320', '1373209613620000081', '1373209022620000184', '1373209845620000243', '1373202279620000140', '1373213822620000239', '1373204776620000574', '1373192482620000658', '1373217895620000391', '1373217153620000146', '1373215754620000381', '1373181914620000250', '1373206477620000539', '1373220674620000651', '1373223662620000518', '1373224291620000393', '1373199145620000004', '1373224613620000196', '1373227268620000022', '1373228869620000113', '1373229707620000013', '1373230163620000008', '1373228450620000201', '1373234711620000372', '1373235624620000372', '1373233042620000395', '1373177852620000003', '1373235929620000263', '1373241379620000356', '1373243320620000570', '1373235487620000276', '1373219394620000391', '1373200382620000030', '1373225793620000337', '1373262828620000904', '1373218529620000163', '1373265408620000904', '1373266027620000455', '1373126465620000094', '1373267613620000904', '1373220441620000464', '1373195821620000172', '1373195785620000576', '1373267754620000207', '1373267537620000450', '1373185119620000608', '1373267560620000470', '1373223036620000177', '1373264682620000304', '1373268720620000249', '1373269133620000436', '1373270031620000562', '1373269573620000153', '1373269888620000325', '1373272614620000481', '1373273371620000268', '1373269773620000525', '1373271075620000621', '1373231736620000518', '1373273076620000027', '1373270733620000015', '1373274337620000136', '1373225399620000047', '1373275074620000525', '1373275134620000297', '1373276161620000007', '1373279043620000345', '1373277368620000676', '1373279314620000120', '1373187309620000513', '1373281819620000065', '1373285890620000618', '1373259855620000235', '1373284856620000226', '1373283803620000687', '1373282474620000446', '1373282421620000455', '1373080815620000603', '1373270774620000036', '1373291261620000364', '1373287203620000224', '1373289225620000541', '1373291065620000370', '1373291427620000468', '1373293047620000455', '1373290717620000518', '1373284746620000527', '1373291886620000093', '1373288673620000607', '1373293283620000494', '1373289770620000904', '1373291682620000233', '1373295018620000148', '1373293619620000440', '1373295532620000541', '1373292520620000529', '1373299510620000464', '1373296186620000574', '1373299397620000460', '1373300389620000321', '1373303726620000320', '1373303238620000345', '1373299140620000542', '1373307832620000426', '1373306183620000163', '1373305389620000359', '1373309539620000492', '1373309744620000334', '1373309972620000327', '1373301247620000470', '1373312749620000674', '1373306954620000093', '1373305201620000337', '1373319765620000011', '1373319260620000403', '1373312110620000517', '1373308021620000446', '1373320795620000486', '1373319264620000672', '1373325965620000310', '1373327371620000231', '1373326470620000356', '1373324155620000665', '1373293632620000901', '1373338218620000665', '1373258588620000534', '1373309660620000520', '1373292209620000342', '1373309036620000276', '1373343119620000450', '1373334708620000153', '1373345396620000351', '1373300002620000623', '1373345350620000239', '1373349742620000480', '1373348077620000189', '1373293175620000330', '1373293845620000539', '1373346307620000901', '1373345789620000446', '1373275142620000419', '1373342773620000476', '1373349408620000455', '1373355907620000328', '1373355855620000605', '1373301315620000186', '1373358049620000343', '1373359854620000454', '1373357393620000131', '1373354440620000904', '1373352824620000675', '1373360135620000541', '1373360969620000108', '1373360628620000071', '1373360629620000562', '1373361624620000619', '1373363915620000560', '1373359400620000363', '1373366148620000455', '1373364133620000107', '1373369947620000080', '1373361455620000541', '1373369647620000187', '1373366863620000207', '1373365262620000421', '1373370720620000586', '1373371713620000037', '1373371832620000363', '1373367702620000163', '1373366488620000347', '1373365543620000446', '1373376109620000678', '1373362448620000602', '1373378842620000075', '1373379264620000658', '1373379563620000472', '1373377100620000517', '1373376728620000229', '1373377773620000136', '1373376226620000242', '1373379070620000111', '1373379822620000527', '1373378025620000487', '1373380873620000239', '1373381474620000131', '1373375879620000041', '1373302267620000309', '1373372392620000250', '1373387300620000901', '1373384049620000435', '1373377563620000254', '1373388681620000623', '1373391600620000517', '1373394475620000540', '1373387836620000120', '1373391871620000123', '1373394031620000146', '1373381830620000900', '1373392104620000245', '1373389741620000542', '1373395364620000280', '1373397524620000031', '1373387381620000589', '1373401029620000603', '1373402267620000311', '1373405884620000678', '1373410567620000540', '1373349432620000534', '1373424830620000256', '1373433874620000525', '1373396122620000658', '1373425679620000450', '1373396636620000281', '1373395811620000206', '1373392482620000320', '1373439050620000904', '1373413231620000363', '1373438740620000372', '1373394944620000047', '1373290990620000312', '1373442164620000672', '1373442197620000605', '1373442075620000113', '1373409442620000381', '1373442823620000446', '1373441853620000578', '1373440629620000653', '1373443436620000472', '1373441938620000344', '1373447948620000410', '1373446579620000343', '1373446560620000436', '1373446195620000561', '1373445465620000529', '1373449360620000303', '1373446103620000286', '1373450565620000658', '1373453031620000171', '1373453665620000114', '1373446355620000481', '1373450265620000572', '1373450840620000589', '1373451623620000053', '1373457671620000376', '1373453608620000351', '1373462581620000049', '1373462815620000307', '1373464247620000363', '1373461346620000171', '1373465694620000268', '1373415377620000108', '1373464194620000101', '1373465312620000454', '1373473613620000321', '1373465370620000338', '1373470300620000190', '1373475344620000048', '1373472066620000363', '1373475008620000206', '1373466556620000254', '1373456526620000902', '1373472613620000101', '1373121418620000595', '1373479405620000611', '1373484483620000157', '1373485275620000129', '1373490531620000297', '1373489662620000195', '1373489998620000129', '1373494736620000370', '1373489308620000216', '1373499458620000570', '1373498067620000372', '1373502543620000269', '1373501192620000403', '1373505962620000360', '1373507304620000649', '1373514366620000665', '1373518311620000403', '1373508005620000304', '1373452028620000449', '1373518269620000235', '1373522180620000904', '1373519790620000596', '1373480338620000021', '1373472076620000346', '1373481951620000001', '1373523794620000269', '1373507847620000154', '1373523725620000496', '1373484246620000623', '1373474628620000547', '1373528657620000377', '1373527368620000171', '1373528914620000084', '1373524323620000432', '1373526734620000904', '1373528250620000163', '1373528336620000304', '1373531194620000285', '1373528966620000361', '1373530149620000675', '1373485822620000314', '1373531200620000605', '1373530820620000114', '1373535109620000142', '1373533189620000027', '1373535423620000432', '1373533153620000179', '1373537897620000618', '1373531408620000904', '1373536488620000146', '1373537509620000098', '1373536626620000163', '1373539573620000128', '1373536777620000334', '1373531964620000137', '1373529013620000206', '1373540409620000136', '1373537569620000083', '1373533634620000215', '1373542060620000304', '1373545369620000508', '1373539941620000400', '1373545466620000448', '1373544943620000295', '1373542355620000446', '1373546648620000258', '1373476519620000205', '1373542378620000607', '1373546809620000304', '1373545003620000363', '1373547458620000671', '1373541767620000621', '1373551319620000086', '1373549219620000153', '1373551057620000160', '1373548059620000031', '1373550882620000268', '1373552277620000018', '1373554544620000060', '1373554790620000142', '1373555457620000072', '1373561195620000041', '1373561573620000148', '1373559889620000303', '1373553814620000607', '1373558978620000311', '1373560252620000347', '1373559282620000129', '1373559146620000171', '1373559728620000093', '1373526337620000305', '1373559305620000541', '1373565471620000586', '1373565277620000359', '1373564211620000311', '1373566508620000561', '1373576135620000904', '1373576613620000235', '1373578020620000424', '1373577376620000363', '1373575300620000255', '1373561771620000320', '1373581513620000231', '1373584972620000446', '1373587970620000276', '1373528716620000569', '1373563189620000515', '1373460005620000230', '1373588556620000363', '1373563409620000172', '1373566711620000048', '1373549511620000205', '1373576060620000604', '1373574504620000697', '1373620526620000446', '1373575876620000243', '1373632048620000098', '1373669500620000571', '1373697399620000263', '1373810837620000086', '1373856221620000569', '1373744588620000131', '1373793855620000279', '1373886176620000144', '1373907528620000080', '1373943489620000235', '1373900111620000137', '1373929203620000215', '1373977032620000256', '1373980047620000080', '1373983434620000327', '1373983380620000589', '1374049109620000400', '1374081664620000048', '1374080448620000902', '1374085507620000624', '1374199959620000403', '1374206288620000129', '1374216456620000502', '1374211988620000356', '1374196945620000363', '1374173357620000315', '1374225140620000341', '1374227366620000207', '1374225640620000543', '1374250402620000607', '1374231396620000235', '1374221412620000276', '1374254432620000166', '1374284432620000273', '1374271607620000337', '1374251710620000065', '1374321275620000093', '1374331094620000184', '1374353713620000347', '1374357092620000663', '1374414713620000541', '1374412612620000574', '1374425176620000570', '1374415750620000276', '1374452569620000678', '1374427534620000663', '1374482035620000199', '1374451498620000482', '1374547981620000900', '1374522604620000131', '1374402196620000376', '1374561374620000199', '1374582998620000542', '1374565222620000166', '1374601254620000256', '1374634125620000497', '1374588555620000279', '1374606172620000315', '1374672528620000542', '1374666772620000356', '1374691916620000199', '1374708716620000345', '1374691055620000693', '1374767578620000308', '1374695667620000651', '1374773546620000662', '1374808611620000534', '1374839046620000256', '1374850130620000153', '1374866636620000452', '1374870968620000207', '1374925072620000517', '1374938263620000256', '1374930240620000351', '1374941299620000678', '1374931475620000569', '1374950213620000624', '1374956248620000692', '1374979363620000503', '1374984383620000900', '1374995953620000663', '1375011877620000900', '1375019242620000470', '1375039136620000481', '1375115934620000279', '1375199936620000525', '1375194968620000518', '1375217531620000207', '1375256415620000166', '1375287179620000243', '1375285105620000215', '1375320453620000363', '1375356563620000688', '1375376645620000364', '1375390471620000356', '1375383545620000315', '1375442796620000589', '1375448094620000663', '1375438507620000688', '1375345270620000250', '1375454317620000178', '1375469920620000542', '1375483295620000179', '1375494695620000434', '1375530872620000648', '1375552160620000542', '1375531934620000295', '1375544979620000199', '1375584856620000075', '1375591454620000503', '1375650383620000525', '1375705988620000421', '1375719335620000483', '1375729912620000574', '1375735322620000255', '1375775189620000446', '1375779926620000040', '1375784959620000446', '1375831918620000503', '1375821981620000026', '1375853428620000406', '1375871052620000446', '1375915380620000199', '1375900881620000180', '1375881474620000160', '1375945558620000446', '1375906011620000697', '1375919001620000356', '1375959649620000321', '1375971371620000632', '1375973964620000621', '1375984752620000337', '1376000314620000403', '1376041520620000279', '1376063354620000504', '1376088612620000446', '1376144745620000435', '1376122933620000279', '1376155446620000337', '1376157263620000434', '1376174129620000235', '1376191614620000080', '1376121130620000534', '1376157231620000464', '1376198585620000356', '1376146880620000510', '1376218708620000900', '1376217565620000569', '1376213605620000496', '1376265683620000542', '1376144027620000421', '1376323911620000571', '1376302433620000688', '1376333182620000304', '1376335579620000276', '1376079249620000449', '1376364211620000434', '1376374764620000255', '1376333028620000098', '1376378510620000304', '1376392672620000693', '1376395315620000386', '1376423661620000607', '1376447853620000482', '1376468095620000137', '1376467759620000534', '1376476912620000297', '1376557753620000668', '1376593891620000051', '1376576398620000010', '1376638468620000021', '1376646990620000542', '1376653957620000460', '1376658119620000342', '1376651412620000589', '1376664044620000668', '1376661398620000900', '1376655720620000607', '1376674020620000363', '1376672323620000337', '1376705012620000542', '1376708629620000503', '1376711309620000692', '1376710416620000549', '1376718212620000684', '1376667262620000207', '1376717173620000542', '1376731098620000500', '1376788109620000658', '1376723923620000160', '1376745504620000207', '1376810486620000156', '1376925882620000391', '1376911561620000688', '1376941008620000434', '1376917605620000435', '1376972042620000540', '1376974718620000280', '1376983806620000038', '1376988546620000099', '1376989956620000529', '1377015613620000468', '1377025130620000472', '1377036002620000207', '1377080030620000159', '1377084643620000688', '1377129876620000612', '1377107505620000678', '1377139192620000159', '1377113516620000607', '1377109077620000487', '1377173572620000608', '1377166378620000904', '1377241257620000042', '1377243648620000009', '1377200800620000107', '1377254486620000697', '1377251536620000249', '1377258381620000160', '1377251679620000607', '1377258752620000384', '1377246628620000171', '1377255241620000476', '1377257813620000315', '1377265129620000331', '1377269881620000171', '1377278209620000554', '1377261344620000196', '1377319043620000472', '1377320693620000386', '1377330367620000692', '1377316485620000668', '1377359988620000436', '1377364209620000492', '1377385502620000684', '1377405809620000665', '1377418801620000432', '1377440417620000060', '1377274857620000330', '1377399930620000075', '1377504763620000675', '1377512924620000634', '1377516493620000688', '1377533388620000217', '1377615085620000047', '1377611426620000678', '1377652602620000363', '1377690604620000310', '1377694252620000455', '1377694263620000657', '1377715295620000624', '1377698210620000554', '1377766057620000276', '1377774084620000276', '1377767437620000137', '1377673633620000688', '1377783223620000303', '1377820950620000037', '1377834713620000269', '1377823417620000363', '1377767802620000074', '1377864976620000010', '1377960662620000465', '1378009285620000601', '1378013977620000658', '1378022466620000486', '1378074263620000451', '1378031534620000058', '1378083093620000451', '1378065110620000527', '1378122685620000050', '1378124825620000634', '1378134644620000419', '1378127050620000173', '1378149189620000903', '1378140058620000432', '1378167919620000161', '1378145710620000230', '1378167869620000616', '1378169947620000280', '1378170323620000569', '1377943216620000510', '1378196286620000235', '1378239356620000486', '1378234157620000315', '1378313329620000364', '1378322408620000304', '1378341653620000465', '1378342019620000042', '1378303083620000449', '1378321392620000303', '1378379420620000607', '1378395285620000446', '1378398733620000303', '1378467743620000557', '1378480505620000386', '1378468686620000510', '1378511280620000345', '1378473779620000458', '1378544246620000057', '1378564969620000465', '1378554255620000410', '1378584205620000434', '1378586061620000540', '1378546711620000534', '1378635464620000684', '1378652615620000359', '1378547884620000432', '1378678230620000617', '1378578840620000001', '1378672460620000113', '1378709350620000900', '1378721328620000118', '1378738709620000080', '1378613225620000624', '1378741303620000022', '1378748048620000406', '1378756576620000434', '1378786182620000367', '1378787052620000693', '1378742325620000464', '1378787813620000356', '1378747260620000180', '1378742706620000451', '1378743633620000250', '1378821363620000144', '1378821361620000465', '1378822189620000009', '1378871631620000900', '1378891449620000363', '1378881561620000178', '1378898126620000496', '1378914078620000144', '1378912733620000235', '1378924185620000360', '1378954279620000305', '1378954358620000031', '1378965307620000406', '1378995611620000900', '1379010540620000624', '1379008077620000406', '1379005625620000180', '1379014197620000676', '1379054515620000455', '1379075426620000140', '1379083548620000140', '1379097295620000624', '1379146472620000455', '1379152451620000144', '1379160278620000327', '1379181412620000334', '1379183396620000624', '1379188522620000434', '1379204593620000453', '1379183906620000116', '1379165961620000207', '1379225006620000503', '1379270813620000465', '1379269624620000207', '1379323421620000009', '1379327617620000607', '1379336753620000224', '1379339394620000304', '1379359607620000051', '1379387707620000356', '1379399551620000662', '1379431917620000289', '1379412534620000688', '1379414144620000243', '1379474015620000325', '1379470626620000004', '1379467739620000430', '1379502111620000017', '1379547020620000577', '1379554846620000285', '1379558130620000263', '1379532742620000255', '1379533398620000607', '1379568201620000577', '1379529032620000049', '1379499746620000688', '1379586061620000235', '1379579044620000688', '1379609140620000674', '1379610291620000902', '1379507807620000534', '1379642184620000542', '1379650128620000153', '1379679222620000144', '1379674005620000688', '1379716112620000256', '1379736379620000488', '1379618463620000607', '1379742538620000686', '1379750646620000539', '1379762502620000616', '1379754437620000074', '1379783549620000507', '1379779486620000440', '1379820052620000075', '1379858043620000341', '1379874573620000904', '1379890176620000465', '1379909716620000367', '1379922357620000021', '1379928243620000513', '1379926606620000017', '1379934643620000021', '1379943028620000436', '1379961141620000076', '1379992817620000653', '1380014858620000640', '1380046310620000605', '1380020036620000688', '1380074794620000105', '1380090754620000662', '1379754166620000510', '1380092908620000320', '1380047763620000315', '1380107758620000144', '1380104031620000611', '1380106759620000470', '1380117060620000386', '1380139976620000595', '1380131985620000624', '1380103939620000620', '1380197802620000464', '1380223800620000246', '1380271151620000297', '1380274565620000903', '1380290653620000576', '1380304351620000163', '1380333474620000525', '1380306198620000036', '1380271174620000510', '1380340718620000249', '1380302750620000349', '1380366946620000137', '1380368912620000616', '1380355992620000607', '1380357174620000496', '1380430401620000387', '1380470043620000678', '1380471235620000542', '1380473267620000271', '1380308800620000315', '1380527798620000900', '1380549020620000540', '1380429985620000624', '1380565385620000624', '1380548792620000297', '1380566824620000434', '1380587096620000363', '1380619214620000487', '1380628073620000144', '1380617245620000040', '1380603555620000435', '1380638904620000347', '1380611605620000351', '1380622506620000688', '1380668042620000480', '1380645664620000515', '1380649698620000255', '1380659938620000017', '1380703971620000144', '1380729606620000084', '1380724330620000083', '1380766914620000446', '1380766869620000618', '1380780793620000363', '1380766238620000465', '1380779665620000247', '1380787989620000608', '1380786577620000443', '1380783803620000146', '1380794336620000201', '1380784770620000199', '1380736071620000285', '1380791647620000678', '1380791436620000066', '1380794131620000589', '1380789259620000542', '1380833534620000662', '1380813985620000279', '1380853991620000395', '1380857142620000900', '1380836761620000207', '1380883819620000111', '1380889321620000344', '1380890417620000144', '1380893083620000341', '1380869214620000242', '1380906172620000363', '1380931056620000243', '1380941562620000356', '1380915806620000465', '1380912421620000281', '1380975154620000144', '1380995943620000196', '1381029065620000075', '1380962775620000113', '1381066251620000273', '1380900355620000050', '1380901094620000487', '1381139138620000662', '1381150456620000398', '1381151987620000192', '1381134093620000688', '1381209624620000577', '1381211483620000534', '1381136033620000608', '1381233125620000144', '1381238125620000509', '1381244160620000010', '1381233613620000387', '1381219242620000688', '1381254146620000332', '1381258560620000315', '1381308370620000136', '1381307591620000144', '1381311264620000101', '1381328153620000436', '1381335217620000676', '1381336499620000588', '1381386949620000341', '1381408159620000280', '1381391620620000524', '1381396404620000688', '1381415960620000363', '1381441440620000598', '1381460854620000199', '1381472488620000021', '1381416023620000197', '1381489436620000123', '1381494302620000144', '1381498082620000309', '1381506741620000386', '1381514406620000285', '1381512770620000295', '1381481971620000534', '1381509384620000260', '1381565169620000341', '1381621784620000458', '1381570301620000688', '1381608212620000116', '1381592336620000222', '1381648487620000658', '1381635525620000665', '1381691014620000481', '1381741582620000363', '1381744144620000144', '1381750414620000315', '1381774482620000598', '1381577381620000569', '1381808274620000403', '1381818252620000351', '1381866874620000011', '1381823353620000902', '1381869029620000017', '1381941165620000503', '1381916647620000903', '1381982626620000042', '1381945598620000172', '1381997517620000557', '1382004984620000077', '1382005928620000504', '1382040025620000434', '1382052349620000431', '1382058070620000089', '1382036442620000297', '1382113544620000095', '1382138042620000465', '1382110709620000432', '1382212251620000334', '1382228919620000588', '1382259041620000680', '1382264055620000207', '1382278387620000435', '1382313013620000465', '1382300512620000633', '1382327008620000273', '1382286191620000435', '1382351467620000618', '1382368818620000432', '1382362123620000524', '1382340719620000668', '1382380645620000453', '1382414185620000351', '1382349169620000075', '1382422448620000364', '1382380136620000634', '1382504696620000588', '1382467709620000902', '1382474210620000017', '1382500151620000665', '1382546094620000391', '1382551203620000664', '1382586827620000199', '1382554889620000085', '1382614323620000144', '1382444458620000372', '1382638016620000276', '1382644253620000113', '1382649982620000363', '1382707792620000589', '1382708252620000588', '1382702854620000049', '1382718124620000080', '1382690836620000359', '1382735628620000243', '1382772055620000473', '1382778221620000386', '1382791960620000634', '1382763771620000624', '1382773956620000588', '1382831792620000171', '1382847585620000406', '1382855126620000406', '1382888758620000109', '1382710848620000397', '1382846233620000255', '1382899867620000363', '1382959633620000524', '1382976398620000144', '1382988783620000304', '1383035630620000166', '1383088863620000509', '1383137015620000508', '1383136257620000296', '1383156802620000453', '1383121754620000260', '1383157662620000172', '1383207887620000279', '1383226233620000144', '1383227002620000246', '1383240884620000144', '1383238082620000658', '1383259275620000503', '1383261272620000273', '1383236379620000012', '1383250931620000607', '1383329915620000588', '1383364872620000207', '1383337544620000524', '1383375844620000189', '1383378534620000403', '1383398053620000429', '1383420589620000624', '1383375860620000288', '1383462912620000664', '1383498074620000100', '1383524675620000678', '1383501532620000207', '1383562656620000386', '1383571520620000324', '1383572803620000021', '1383545964620000173', '1383573495620000370', '1383577319620000137', '1383585473620000279', '1383595002620000315', '1383580332620000902', '1383639581620000207', '1383642481620000678', '1383661662620000045', '1383699526620000376', '1383654407620000904', '1383666543620000534', '1383677708620000137', '1383672244620000487', '1383732974620000386', '1383741788620000542', '1383740520620000680', '1383744381620000453', '1383762098620000363', '1383771895620000561', '1383806491620000562', '1383771914620000163', '1383768495620000128', '1383813136620000126', '1383815141620000640', '1383826667620000529', '1383839945620000045', '1383852204620000001', '1383892237620000086', '1383848561620000608', '1383901719620000588', '1383920028620000351', '1383941987620000903', '1383936125620000363', '1383906630620000678', '1383954770620000334', '1383978784620000276', '1383934773620000172', '1383945680620000681', '1383996290620000289', '1384011311620000565', '1384065242620000542', '1384088345620000619', '1384082148620000362', '1384066140620000172', '1383940982620000315', '1384107815620000252', '1384171511620000403', '1384178872620000403', '1384191858620000252', '1384191027620000626', '1384200941620000352', '1384186757620000902', '1384240666620000363', '1384287522620000017', '1384340259620000386', '1384354964620000386', '1384409483620000276', '1384386971620000482', '1384422885620000294', '1384367869620000667', '1384426629620000075', '1384426972620000285', '1384438948620000381', '1384467514620000356', '1384510623620000152', '1384462343620000017', '1384504177620000665', '1384533388620000157', '1384582454620000060', '1384535958620000432', '1384591632620000337', '1384616571620000393', '1384646497620000432', '1384716135620000393', '1384774336620000021', '1384795976620000163', '1384832286620000608', '1384799004620000172', '1384795740620000432', '1384796464620000434', '1384805167620000014', '1384516967620000407', '1384851071620000356', '1384859711620000393', '1384870666620000678', '1384889498620000363', '1384897983620000158', '1384968411620000618', '1385000479620000662', '1384983229620000904', '1385032881620000279', '1385032505620000608', '1385024475620000351', '1385054261620000675', '1385061419620000465', '1385056201620000515', '1385083001620000542', '1385098138620000333', '1385082699620000363', '1385109615620000021', '1385096242620000496', '1385094791620000303', '1385126002620000146', '1385141302620000095', '1385148623620000207', '1385163495620000518', '1385185523620000310', '1385169447620000129', '1385195078620000588', '1385271484620000288', '1385283995620000432', '1385310767620000120', '1385321062620000675', '1385316218620000363', '1385328870620000188', '1385373212620000334', '1385400137620000271', '1385429135620000011', '1385404060620000049', '1385463339620000539', '1385492955620000311', '1385491583620000432', '1385538135620000510', '1385572009620000144', '1385592865620000332', '1385568057620000137', '1385615573620000341', '1385600583620000363', '1385587945620000017', '1385637222620000527', '1385645521620000081', '1385678843620000465', '1385685230620000363', '1385704645620000662', '1385674146620000017', '1385716955620000304', '1385721914620000370', '1385729052620000386', '1385808180620000276', '1385803163620000902', '1385819459620000081', '1385907725620000542', '1385879158620000217', '1385910422620000174', '1385902222620000356', '1385919597620000311', '1385943848620000101', '1385995413620000163', '1385993235620000386', '1385811642620000315', '1386033074620000363', '1386049239620000569', '1386059186620000310', '1386083526620000486', '1386090567620000386', '1386090448620000902', '1386150469620000571', '1386101957620000017', '1386156694620000446', '1386144249620000534', '1386217032620000578', '1386217716620000617', '1386171384620000137', '1386178706620000036', '1386217741620000611', '1386207514620000060', '1386269632620000137', '1386335760620000048', '1386356593620000245', '1386346894620000904', '1386363293620000540', '1386405784620000342', '1386422152620000083', '1386416128620000386', '1386404573620000226', '1386464993620000215', '1386474080620000570', '1386477620620000276', '1386517980620000687', '1386536987620000384', '1386583196620000572', '1386586767620000591', '1386615426620000341', '1386639113620000363', '1386603870620000432', '1386618470620000516', '1386702156620000662', '1386747431620000503', '1386750306620000320', '1386722342620000363', '1386711189620000017', '1386838356620000483', '1386836034620000395', '1386875499620000304', '1386879419620000255', '1386864849620000159', '1386864138620000527', '1386884128620000017', '1386935436620000608', '1386929564620000152', '1386950858620000648', '1386986874620000486', '1386985646620000363', '1387017740620000053', '1387044515620000514', '1387201400620000588', '1387211698620000618', '1387267894620000576', '1387309813620000304', '1387301132620000588', '1387314619620000246', '1387320387620000561', '1387370025620000222', '1387389635620000157', '1387419606620000435', '1387388458620000432', '1387438589620000904', '1387475065620000435', '1387520187620000678', '1387521195620000534', '1387542743620000435', '1387543508620000588', '1387549423620000174', '1387552098620000044', '1387559442620000678', '1387565788620000547', '1387539064620000534', '1387617488620000664', '1387602266620000320', '1387566496620000180', '1387634670620000039', '1387573127620000548', '1387651477620000171', '1387666832620000273', '1387676121620000015', '1387683731620000621', '1387686136620000395', '1387628554620000207', '1387722833620000648', '1387737252620000435', '1387743491620000376', '1387788041620000539', '1387796339620000408', '1387798655620000688', '1387798168620000267', '1387803713620000901', '1387865205620000450', '1387801862620000041', '1387875250620000435', '1387880336620000651', '1387974232620000363', '1388052744620000207', '1388042445620000351', '1387897545620000496', '1388059258620000356', '1388084383620000618', '1388114969620000686', '1388071152620000065', '1388075710620000432', '1388162939620000308', '1388165223620000432', '1388234574620000616', '1388246309620000649', '1388265654620000341', '1388296565620000376', '1388254024620000506', '1388300727620000421', '1388311102620000310', '1388344914620000464', '1388408189620000601', '1388389769620000351', '1388422367620000516', '1388400475620000384', '1388464564620000435', '1388453156620000363', '1388479610620000021', '1388487542620000021', '1388501615620000386', '1388506339620000681', '1388516456620000634', '1388519353620000376', '1388543412620000492', '1388532011620000305', '1388504332620000633', '1388563265620000280', '1388591110620000303', '1388521165620000448', '1388596302620000288', '1388614994620000341', '1388517366620000467', '1388512565620000207', '1388675419620000229', '1388434092620000160', '1388717329620000372', '1388729965620000105', '1388710868620000363', '1388698160620000017', '1388744601620000435', '1388673892620000518', '1388300954620000510', '1388763565620000688', '1388778713620000525', '1388781740620000675', '1388815672620000166', '1388518157620000407', '1388790207620000518', '1388774316620000026', '1388875862620000435', '1388766249620000510', '1388903957620000435', '1388845130620000001', '1388942456620000605', '1389012989620000024', '1389025926620000435', '1389056745620000363', '1389094817620000693', '1389135855620000199', '1389112514620000279', '1389113539620000902', '1389116033620000386', '1389128929620000464', '1389117442620000506', '1389205127620000304', '1389229319620000363', '1389256302620000518', '1389203757620000902', '1389264095620000688', '1389211136620000250', '1389289665620000116', '1389278942620000518', '1389359588620000148', '1389372509620000148', '1389350920620000688', '1389380985620000688', '1389384873620000304', '1389381390620000664', '1389386407620000017', '1389455764620000483', '1389443613620000540', '1389461164620000057', '1389467903620000304', '1389479623620000081', '1389490364620000435', '1389522342620000207', '1389468311620000518', '1389541385620000269', '1389491317620000506', '1389550643620000435', '1389626868620000688', '1389630045620000904', '1389707419620000506', '1389769355620000269', '1389797706620000576', '1389805453620000529', '1389776871620000588', '1389795868620000432', '1389805625620000487', '1389863718620000678', '1389847254620000435', '1389884134620000080', '1389902790620000304', '1389982023620000085', '1389989883620000586', '1389986219620000321', '1390014312620000547', '1389973932620000247', '1389981952620000137', '1390023730620000903', '1390043232620000618', '1390066432620000251', '1390037897620000279', '1390155247620000363', '1390239605620000308', '1390245370620000517', '1390243458620000487', '1390306147620000174', '1390306665620000675', '1390316756620000432', '1390096162620000351', '1390355669620000435', '1390367901620000903', '1390325396620000487', '1390389578620000370', '1390391217620000554', '1390416592620000332', '1390471777620000269', '1390486253620000108', '1390490818620000608', '1390495568620000432', '1390502381620000040', '1390569909620000131', '1390565113620000657', '1390554192620000199', '1390579013620000657', '1390621663620000077', '1390624560620000321', '1390624149620000421', '1390590121620000664', '1390667624620000435', '1390698652620000658', '1390701055620000435', '1390699529620000245', '1390711227620000460', '1390660708620000207', '1390837452620000333', '1390824373620000021', '1390816388620000351', '1390840490620000279', '1390871792620000363', '1390663996620000510', '1390898208620000008', '1390904592620000172', '1390941378620000345', '1390932845620000693', '1390998995620000601', '1387585767620000344', '1391005033620000030', '1390991699620000535', '1391007453620000612', '1391022637620000663', '1391042784620000363', '1391076914620000242', '1391080615620000516', '1391086821620000320', '1391122774620000023', '1391129800620000633', '1391161734620000510', '1391202848620000341', '1391215975620000280', '1391230973620000356', '1391227810620000263', '1391195459620000186', '1391253669620000356', '1391256536620000540', '1391258406620000137', '1391267634620000255', '1391269856620000172', '1391246146620000510', '1391372536620000554', '1391367631620000363', '1391428533620000100', '1391438981620000172', '1391438765620000229', '1391441295620000245', '1391450482620000693', '1391473985620000363', '1391506894620000225', '1391512508620000040', '1391504112620000166', '1391511055620000678', '1391548430620000334', '1391523163620000458', '1391545915620000017', '1391548075620000451', '1391623686620000434', '1391692371620000663', '1391674641620000351', '1391778763620000634', '1391774029620000579', '1391777076620000588', '1391818819620000010', '1391822540620000370', '1391829805620000320', '1391783793620000408', '1391855045620000137', '1391911324620000207', '1391949827620000406', '1391951801620000328', '1391978497620000154', '1392011949620000406', '1391983809620000554', '1392033344620000337', '1392065883620000188', '1392107956620000279', '1392040533620000698', '1392175005620000435', '1392281620620000205', '1392282565620000480', '1392237011620000465', '1392283288620000002', '1392296212620000048', '1392308311620000516', '1392314479620000294', '1392370486620000617', '1392370676620000557', '1392382198620000050', '1392379717620000021', '1392395423620000321', '1392391160620000017', '1392403313620000662', '1392432829620000328', '1392435686620000321', '1392447375620000196', '1392406217620000681', '1392422125620000045', '1392468282620000672', '1392450276620000351', '1392516560620000518', '1392222958620000510', '1392569513620000048', '1392634026620000308', '1392677852620000435', '1392664136620000279', '1392700711620000163', '1392684380620000363', '1392645951620000217', '1392665044620000255', '1392724174620000409', '1392706822620000173', '1392741318620000624', '1392797994620000041', '1392732296620000458', '1392749129620000668', '1392806363620000229', '1392824092620000594', '1392814137620000243', '1392839667620000675', '1392816838620000496', '1392896511620000257', '1392926188620000042', '1392954859620000435', '1392963878620000900', '1392989994620000144', '1392992100620000363', '1392988671620000588', '1392992197620000688', '1392914235620000524', '1393005102620000337', '1393018257620000626', '1393069657620000525', '1393068961620000144', '1393068000620000432', '1393152374620000341', '1393172598620000229', '1393187164620000005', '1393136421620000031', '1393226431620000136', '1393014114620000128', '1393283674620000473', '1393275901620000085', '1393271536620000634', '1393181641620000243', '1393324231620000213', '1393346904620000334', '1393352656620000363', '1393331026620000634', '1393344608620000381', '1393350135620000386', '1393371830620000363', '1393409841620000518', '1393409412620000050', '1393081904620000496', '1393442225620000156', '1393437767620000634', '1393443999620000624', '1393493936620000473', '1393514921620000320', '1393490287620000351', '1393525363620000672', '1393506300620000698', '1393533379620000424', '1393514492620000163', '1393549088620000363', '1393596456620000518', '1393616928620000520', '1393653326620000571', '1393676823620000370', '1393702965620000177', '1393704579620000304', '1393710703620000435', '1393609128620000432', '1393737283620000618', '1393749418620000326', '1393784683620000363', '1393832289620000454', '1393846978620000144', '1393851957620000144', '1393837020620000904', '1393908240620000588', '1393879147620000607', '1393864709620000076', '1393933694620000279', '1393972425620000288', '1393945079620000077', '1394021533620000454', '1394159223620000263', '1394136004620000607', '1394150825620000255', '1394141508620000017', '1394120983620000693', '1394192577620000022', '1394194182620000688', '1394215459620000634', '1394196397620000576', '1394219650620000672', '1394230153620000540', '1394246322620000190', '1394259242620000166', '1394251937620000506', '1394313426620000341', '1394337613620000196', '1394324741620000598', '1394283966620000207', '1394380858620000540', '1394384743620000900', '1394441984620000138', '1394465124620000257', '1394466619620000423', '1394477887620000245', '1394498007620000363', '1394524960620000123', '1394444895620000510', '1394535259620000398', '1394539610620000075', '1394546778620000304', '1394558806620000409', '1394564162620000311', '1394545048620000189', '1394608803620000136', '1394534592620000510', '1394646170620000118', '1394665212620000598', '1394684521620000435', '1394656638620000607', '1394652844620000085', '1394729447620000665', '1394707922620000076', '1394734847620000902', '1394790737620000364', '1394804821620000653', '1394745898620000243', '1394809034620000540', '1394828722620000612', '1394822695620000429', '1394829643620000607', '1394863698620000688', '1394863168620000497', '1394878359620000904', '1394890936620000675', '1394923972620000678', '1394944217620000678', '1394946637620000618', '1394892145620000569', '1394949550620000057', '1394972069620000328', '1395005472620000190', '1394887408620000449', '1394968143620000569', '1395075926620000529', '1395104028620000359', '1395076060620000432', '1395103256620000066', '1395125706620000665', '1395139705620000002', '1395188012620000222', '1395190581620000363', '1395222846620000476', '1395226922620000901', '1395231148620000657', '1395248220620000540', '1395244589620000688', '1395288747620000140', '1395251713620000393', '1395297799620000423', '1395364502620000190', '1395364630620000363', '1395339605620000449', '1395394027620000328', '1395406379620000359', '1395420772620000295', '1395426589620000053', '1395478123620000611', '1395474642620000344', '1395489534620000569', '1395515009620000697', '1395597468620000190', '1395597455620000363', '1395506056620000468', '1395653018620000698', '1395699783620000252', '1395686498620000562', '1395666330620000545', '1395733940620000454', '1395573272620000510', '1395739052620000453', '1395737090620000525', '1395737974620000166', '1395754106620000546', '1395766813620000591', '1395762492620000370', '1395773877620000148', '1395779622620000226', '1395777562620000607', '1395783536620000017', '1395763224620000527', '1395823108620000196', '1395843449620000634', '1395856544620000341', '1395899004620000648', '1395845497620000432', '1395920334620000224', '1395946513620000334', '1395941318620000217', '1395939159620000510', '1395946252620000187', '1395957439620000222', '1395996019620000468', '1396000068620000542', '1396002902620000269', '1396002318620000688', '1396018295620000649', '1396035381620000077', '1396061577620000077', '1396067440620000285', '1396015852620000470', '1396125197620000463', '1396113595620000496', '1396159469620000104', '1396040460620000026', '1396235260620000542', '1396118210620000294', '1396174028620000510', '1396255557620000098', '1396262296620000144', '1396296467620000362', '1396370716620000667', '1396368934620000386', '1396428411620000386', '1396439511620000386', '1396444676620000386', '1396464121620000001', '1396515072620000386', '1396508355620000510', '1396520985620000695', '1396534194620000201', '1396538112620000051', '1396532177620000634', '1396542720620000279', '1396598115620000510', '1396619380620000577', '1396626068620000435', '1396638911620000455', '1396675797620000333', '1396634002620000049', '1396614571620000634', '1396685077620000487', '1396709139620000039', '1396799565620000900', '1396796988620000325', '1396794022620000540', '1396724249620000246', '1396544631620000902', '1396883968620000303', '1396892540620000576', '1396879449620000180', '1396963276620000304', '1396963034620000341', '1397000118620000363', '1397033875620000320', '1397087969620000363', '1397119302620000588', '1397120249620000222', '1397128190620000529', '1397165732620000042', '1397199573620000619', '1397208462620000545', '1397122030620000510', '1397220459620000603', '1397226762620000144', '1397219812620000380', '1397227566620000276', '1397249260620000435', '1397241931620000077', '1397234915620000432', '1397279607620000406', '1397283416620000341', '1397317896620000576', '1397303492620000109', '1397320820620000276', '1397349882620000424', '1397352413620000572', '1397387415620000027', '1397405807620000424', '1397370649620000591', '1397233364620000144', '1397374784620000539', '1397462719620000562', '1397497875620000332', '1397460669620000534', '1397537646620000320', '1397556172620000393', '1397551060620000051', '1397574735620000678', '1397578470620000321', '1397562642620000376', '1397590740620000667', '1397585816620000902', '1397656482620000081', '1397633651620000027', '1397710246620000344', '1397714983620000363', '1397672447620000085', '1397728551620000320', '1397726842620000001', '1397746301620000685', '1397733157620000246', '1397780013620000472', '1397751576620000432', '1397790965620000611', '1397786891620000307', '1397745428620000443', '1397812579620000196', '1397767282620000177', '1397862328620000508', '1397912861620000542', '1397898598620000624', '1397910839620000540', '1397926377620000455', '1397886010620000510', '1397986527620000386', '1398083397620000184', '1398080557620000634', '1398101742620000634', '1398104570620000454', '1398109160620000263', '1398183072620000279', '1398190843620000180', '1398240314620000900', '1398154907620000510', '1398260371620000144', '1398294564620000424', '1398296381620000548', '1398323764620000640', '1398331272620000144', '1398344589620000006', '1398348563620000611', '1398398044620000197', '1398404732620000406', '1398415354620000085', '1398440210620000276', '1398476252620000121', '1398516067620000569', '1398549973620000224', '1398550375620000542', '1398573750620000041', '1398529491620000468', '1398502610620000432', '1398624946620000269', '1398612966620000540', '1398616576620000207', '1398668871620000341', '1398697955620000137', '1398428437620000098', '1398711838620000607', '1398751964620000363', '1398696016620000222', '1398772243620000148', '1398797041620000492', '1398793880620000496', '1398803403620000017', '1398849093620000626', '1398853605620000486', '1398865694620000121', '1398873920620000305', '1398919882620000588', '1398936845620000473', '1398941835620000430', '1398953242620000634', '1398969303620000486', '1398969025620000295', '1398859472620000545', '1399011013620000131', '1399008398620000435', '1399020255620000900', '1399020855620000901', '1398846580620000205', '1399026133620000634', '1399033763620000376', '1399039089620000499', '1399034743620000040', '1399045289620000319', '1399030030620000591', '1399055975620000492', '1399016732620000904', '1399055316620000338', '1399055322620000465', '1399042842620000698', '1399110633620000900', '1399121762620000634', '1399108454620000224', '1399059610620000217', '1399141474620000624', '1399198351620000624', '1399250496620000686', '1399215520620000434', '1399125240620000040', '1399298126620000144', '1399287272620000693', '1399313277620000500', '1399314057620000067', '1399313236620000468', '1399347932620000698', '1399356905620000393', '1399386042620000516', '1399382082620000144', '1399406409620000607', '1399439704620000184', '1399405185620000508', '1399452591620000001', '1399469355620000304', '1399486679620000372', '1399509489620000662', '1399510606620000356', '1399537683620000144', '1399498767620000688', '1399561786620000184', '1399569633620000136', '1399600350620000440', '1399596765620000686', '1399550866620000247', '1399567446620000435', '1399576435620000607', '1399633183620000540', '1399659736620000591', '1399659870620000624', '1399662366620000304', '1399688210620000006', '1399699818620000310', '1399700094620000254', '1399698936620000698', '1399717474620000207', '1399756606620000663', '1399796144620000668', '1399781931620000620', '1399822093620000451', '1399637052620000095', '1399881092620000548', '1399915553620000634', '1399926383620000496', '1399960986620000279', '1399955987620000657', '1399964719620000539', '1399976776620000634', '1399913203620000332', '1399979015620000681', '1400044557620000406', '1400013060620000017', '1400066770620000144', '1400067364620000051', '1400059951620000633', '1400103359620000570', '1400143796620000513', '1400151374620000634', '1400198284620000633', '1400181324620000607', '1400220103620000633', '1400209111620000688', '1400229159620000434', '1400218867620000140', '1400258615620000403', '1400200756620000192', '1400260748620000252', '1400250282620000068', '1400284713620000167', '1400290795620000688', '1400228835620000562', '1400269079620000634', '1400317140620000184', '1400266192620000144', '1400336565620000665', '1400358456620000010', '1400327707620000570', '1400371361620000389', '1400385588620000381', '1400334771620000386', '1400352331620000049', '1400434120620000159', '1400539878620000463', '1400567019620000136', '1400581561620000247', '1400587735620000407', '1400586188620000670', '1400595993620000247', '1400615188620000607', '1400609360620000085', '1400617653620000017', '1400713777620000903', '1400743187620000436', '1400763636620000144', '1400774277620000529', '1400777306620000315', '1400786824620000307', '1400822624620000239', '1400827450620000658', '1400775132620000494', '1400842464620000144', '1400842221620000616', '1400847344620000387', '1400861407620000213', '1400865714620000455', '1400907448620000153', '1400914817620000031', '1399784326620000190', '1400937698620000634', '1400912691620000173', '1400860550620000432', '1400961576620000434', '1400996137620000509', '1400957222620000452', '1401037372620000325', '1401052568620000356', '1401088513620000272', '1401118397620000435', '1401119740620000608', '1401119461620000136', '1401168870620000273', '1401184023620000432', '1401175897620000672', '1401201763620000131', '1401213177620000304', '1401235507620000009', '1401242717620000304', '1401202828620000432', '1401258396620000136', '1401284794620000172', '1401296809620000634', '1401258505620000173', '1401320806620000632', '1401315617620000574', '1401297379620000606', '1401297636620000588', '1401347336620000015', '1401386061620000678', '1401355677620000499', '1401341877620000534', '1401388135620000658', '1401374294620000510', '1401452920620000542', '1401461983620000589', '1401468566620000308', '1401476654620000598', '1401477165620000057', '1401471777620000255', '1401475719620000607', '1401538219620000279', '1401592870620000617', '1401583761620000465', '1401592410620000001', '1401547399620000634', '1401520410620000510', '1401534097620000131', '1401648925620000510', '1401712275620000376', '1401707288620000268', '1401724466620000144', '1401725633620000548', '1401699212620000520', '1401777296620000152', '1401596086620000672', '1401793960620000144', '1401793544620000665', '1401816777620000688', '1401804068620000065', '1401791144620000634', '1401866418620000540', '1401882875620000540', '1401586482620000554', '1401906495620000260', '1401909321620000297', '1401903549620000406', '1401895340620000518', '1401901091620000363', '1401914853620000246', '1401958135620000576', '1401866039620000510', '1401992600620000668', '1401995358620000304', '1401981036620000518', '1402033491620000900', '1401993149620000001', '1402019544620000688', '1401999635620000177', '1401994417620000634', '1402043860620000239', '1402016475620000356', '1402067105620000207', '1402059322620000680', '1402091074620000276', '1402109357620000337', '1402113145620000542', '1401990404620000510', '1402123122620000304', '1402143029620000195', '1402123498620000173', '1402160887620000252', '1402132083620000250', '1402169398620000546', '1402202393620000356', '1402145247620000569', '1402153461620000432', '1402247348620000197', '1402322448620000477', '1402329144620000320', '1402338676620000607', '1402333828620000676', '1402391162620000384', '1402456162620000434', '1402360466620000554', '1402472149620000539', '1402497322620000249', '1402507638620000561', '1402503606620000504', '1402525409620000688', '1402530507620000651', '1402515866620000448', '1402557965620000393', '1402570266620000144', '1402568597620000363', '1402585421620000363', '1402589074620000529', '1402599505620000557', '1402586465620000435', '1402593684620000013', '1402692971620000362', '1402687217620000005', '1402648248620000534', '1402660853620000510', '1402739343620000180', '1402727164620000173', '1402718930620000672', '1402771337620000001', '1402772275620000341', '1402798666620000337', '1402754008620000207', '1402747474620000569', '1402744534620000634', '1402834342620000634', '1402841074620000197', '1402670454620000623', '1402813315620000406', '1402870800620000483', '1402928522620000653', '1402932056620000453', '1402933200620000307', '1403000299620000384', '1403013856620000688', '1403043940620000688', '1403029622620000137', '1403036650620000017', '1403021427620000159', '1403068907620000534', '1403030282620000085', '1403078820620000455', '1403080495620000285', '1403103890620000574', '1403104023620000086', '1403122867620000207', '1403099934620000449', '1403175588620000239', '1403202524620000304', '1403209279620000902', '1403201962620000634', '1403269070620000051', '1403277888620000092', '1403276975620000540', '1403279912620000529', '1403310246620000341', '1403017490620000510', '1403283450620000001', '1403342284620000230', '1403351899620000137', '1403349881620000341', '1403372990620000406', '1403402874620000453', '1403375847620000403', '1403384283620000222', '1403414161620000406', '1403425463620000101', '1403449402620000540', '1403449604620000429', '1403449292620000463', '1403443744620000341', '1403428043620000562', '1403462101620000607', '1403348240620000449', '1403517030620000664', '1403503885620000381', '1403525625620000137', '1403534323620000308', '1403535895620000112', '1403533971620000273', '1403549498620000279', '1403535404620000432', '1403572672620000684', '1403585035620000050', '1403592706620000621', '1403601744620000674', '1403605385620000480', '1403470074620000527', '1403678092620000534', '1403713088620000432', '1403735664620000542', '1403759833620000900', '1403720718620000085', '1403781675620000634', '1403797551620000634', '1403878739620000693', '1403909074620000190', '1403925609620000252', '1403924805620000173', '1403963957620000616', '1403966099620000665', '1403932040620000173', '1403959128620000295', '1403974686620000616', '1403937889620000510', '1404011612620000341', '1403958141620000569', '1404057631620000432', '1403945555620000562', '1404106978620000682', '1404062577620000634', '1404123945620000009', '1404134239620000085', '1404132864620000436', '1404133021620000101', '1404130666620000684', '1404137660620000109', '1404128104620000171', '1404144544620000085')

-- DELETE data with missing values
DELETE 
FROM 
    trips
WHERE 
    missing_data = 'true'

-- Delete duplicate trip_ids that have smaller linestring values
DELETE 
FROM trips a
WHERE EXISTS (SELECT 1 FROM trips b
			 WHERE a.trip_id = b.trip_id 
			  AND ST_NumPoints(a.line_geom) < ST_NumPoints(b.line_geom))

-- Delete duplicates with same size linestrings
DELETE FROM trips a USING (
    SELECT MIN(ctid) as ctid, trip_id
	FROM trips 
    GROUP BY trip_id HAVING COUNT(*) > 1
) b
WHERE a.trip_id = b.trip_id
AND a.ctid <> b.ctid;

-- CREATE columns to avoid using ST_StartPoint() and ST_EndPoint() (explained in the report)
ALTER TABLE trips
ADD COLUMN start_point geometry(Point, 4326);

UPDATE trips
SET start_point = ST_StartPoint(line_geom);

ALTER TABLE trips
ADD COLUMN end_point geometry(Point, 4326);

UPDATE trips
SET end_point = ST_EndPoint(line_geom);

-- ADD VARCHAR version of call_type for GIN index
ALTER TABLE trips
ADD COLUMN call_type_str VARCHAR(1);

UPDATE trips
SET call_type_str = call_type;


/* 
Query Task 1:
DESCRIBE YOUR QUERY TASK HERE 
The taxi company decides to award a driver from each section of the city who has achieved highest total trip time.
The trip will only count as being associated with an area if it started or ended in that area otherwise, taxi drivers can just drive through every single district.
*/

/* Test Case 1.1: DESCRIBE YOUR CASE HERE */

-- Timeframe: July 1st 2013 to August 1st 2013
-- Area: North West of Porto / ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326)

/* Test Case 1.1 with YOUR_INDEX_METHOD_1 */
INDEX method = SEQ SCAN
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
SELECT 
    taxi_id, 
    (COUNT(ST_NumPoints(line_geom)) - 1) / 4 AS total_minutes, 
    COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326), 
	start_point)
    OR
    ST_Intersects(ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326), 
	end_point))
    AND timestamp < '1375279200'
    AND timestamp > '1372600800'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT
	3;

/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
*/
20000424	158	635
20000372	156	625
20000403	152	609

 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
*/
"Limit  (cost=18787293.91..18787293.91 rows=3 width=20) (actual time=8368.260..8368.281 rows=3 loops=1)"
"  Buffers: shared hit=16296 read=938561, temp read=11898 written=11933"
"  ->  Sort  (cost=18787293.91..18787295.00 rows=439 width=20) (actual time=8368.259..8368.280 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=16296 read=938561, temp read=11898 written=11933"
"        ->  Finalize GroupAggregate  (cost=18779759.99..18787288.23 rows=439 width=20) (actual time=8288.976..8368.222 rows=429 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=16296 read=938561, temp read=11898 written=11933"
"              ->  Gather Merge  (cost=18779759.99..18787275.06 rows=878 width=20) (actual time=8288.958..8368.026 rows=1280 loops=1)"
"                    Workers Planned: 2"
"                    Workers Launched: 2"
"                    Buffers: shared hit=16296 read=938561, temp read=11898 written=11933"
"                    ->  Partial GroupAggregate  (cost=18778759.97..18786173.70 rows=439 width=20) (actual time=8239.432..8307.857 rows=427 loops=3)"
"                          Group Key: taxi_id"
"                          Buffers: shared hit=16296 read=938561, temp read=11898 written=11933"
"                          ->  Sort  (cost=18778759.97..18778897.18 rows=54884 width=818) (actual time=8239.398..8298.028 rows=41204 loops=3)"
"                                Sort Key: taxi_id"
"                                Sort Method: external merge  Disk: 30176kB"
"                                Buffers: shared hit=16036 read=938561, temp read=11898 written=11933"
"                                Worker 0:  Sort Method: external merge  Disk: 30616kB"
"                                Worker 1:  Sort Method: external merge  Disk: 34392kB"
"                                ->  Parallel Seq Scan on trips  (cost=0.00..18754552.47 rows=54884 width=818) (actual time=0.589..8128.660 rows=41204 loops=3)"
"                                      Filter: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1372600800) AND (st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry, start_point) OR st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry, end_point)))"
"                                      Rows Removed by Filter: 528057"
"                                      Buffers: shared hit=15922 read=938561"
"Planning Time: 0.428 ms"
"Execution Time: 8369.379 ms"


/* Test Case 1.1: DESCRIBE YOUR CASE HERE */

-- Timeframe: July 1st 2013 to August 1st 2013
-- Area: North West of Porto / ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326)

/* Test Case 1.1 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2
-- BRIN index on timestamp
CREATE INDEX idx_trips_timestamp ON trips USING BRIN (timestamp);

SET enable_seqscan = OFF;

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    taxi_id, 
    (COUNT(ST_NumPoints(line_geom)) - 1) / 4 AS total_minutes, 
    COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326), 
	start_point)
    OR
    ST_Intersects(ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326), 
	end_point))
    AND timestamp < '1375279200'
    AND timestamp > '1372600800'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT
	3;

/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
20000424	158	635
20000372	156	625
20000403	152	609

 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
*/
"Limit  (cost=17507620.53..17507620.53 rows=3 width=20) (actual time=461.450..461.485 rows=3 loops=1)"
"  Buffers: shared hit=170 read=148222, temp read=11899 written=11934"
"  ->  Sort  (cost=17507620.53..17507621.62 rows=439 width=20) (actual time=461.448..461.483 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=170 read=148222, temp read=11899 written=11934"
"        ->  Finalize GroupAggregate  (cost=17500086.61..17507614.85 rows=439 width=20) (actual time=419.326..461.414 rows=429 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=170 read=148222, temp read=11899 written=11934"
"              ->  Gather Merge  (cost=17500086.61..17507601.68 rows=878 width=20) (actual time=419.313..460.492 rows=1282 loops=1)"
"                    Workers Planned: 2"
"                    Workers Launched: 2"
"                    Buffers: shared hit=170 read=148222, temp read=11899 written=11934"
"                    ->  Partial GroupAggregate  (cost=17499086.59..17506500.32 rows=439 width=20) (actual time=400.472..435.955 rows=427 loops=3)"
"                          Group Key: taxi_id"
"                          Buffers: shared hit=170 read=148222, temp read=11899 written=11934"
"                          ->  Sort  (cost=17499086.59..17499223.80 rows=54884 width=818) (actual time=400.441..414.605 rows=41204 loops=3)"
"                                Sort Key: taxi_id"
"                                Sort Method: external merge  Disk: 33248kB"
"                                Buffers: shared hit=24 read=148108, temp read=11899 written=11934"
"                                Worker 0:  Sort Method: external merge  Disk: 32336kB"
"                                Worker 1:  Sort Method: external merge  Disk: 29608kB"
"                                ->  Parallel Bitmap Heap Scan on trips  (cost=187.53..17474879.09 rows=54884 width=818) (actual time=5.380..334.907 rows=41204 loops=3)"
"                                      Recheck Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1372600800))"
"                                      Rows Removed by Index Recheck: 51139"
"                                      Filter: (st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry, start_point) OR st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry, end_point))"
"                                      Rows Removed by Filter: 6330"
"                                      Heap Blocks: lossy=23181"
"                                      Buffers: shared hit=11 read=148107"
"                                      ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..154.60 rows=469490 width=0) (actual time=15.815..15.815 rows=1480830 loops=1)"
"                                            Index Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1372600800))"
"                                            Buffers: shared hit=11 read=24"
"Planning:"
"  Buffers: shared hit=1"
"Planning Time: 0.376 ms"
"Execution Time: 462.321 ms"

/* Test Case 1.1: DESCRIBE YOUR CASE HERE */

-- Timeframe: July 1st 2013 to August 1st 2013
-- Area: North West of Porto / ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326)\

/* Test Case 1.1 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3
-- GIST index on start & end point of line_geom

CREATE INDEX gist_start_geom ON trips USING gist(start_point);
CREATE INDEX gist_end_geom ON trips USING gist(end_point);



EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    taxi_id, 
    (COUNT(ST_NumPoints(line_geom)) - 1) / 4 AS total_minutes, 
    COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326), 
	start_point)
    OR
    ST_Intersects(ST_GeomFromText('POLYGON((-8.68 41.15, -8.6 41.14, -8.6 41.2, -8.72 41.2, -8.68 41.15))', 4326), 
	end_point))
    AND timestamp < '1375279200'
    AND timestamp > '1372600800'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT
	3;

/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
20000424	158	635
20000372	156	625
20000403	152	609
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=9920.07..9920.08 rows=3 width=20) (actual time=4508.308..4508.309 rows=3 loops=1)"
"  Buffers: shared hit=9375 read=378531 written=9676, temp read=19634 written=19670"
"  ->  Sort  (cost=9920.07..9920.14 rows=27 width=20) (actual time=4508.303..4508.304 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=9375 read=378531 written=9676, temp read=19634 written=19670"
"        ->  GroupAggregate  (cost=9915.54..9919.72 rows=27 width=20) (actual time=4458.221..4508.082 rows=429 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=9375 read=378531 written=9676, temp read=19634 written=19670"
"              ->  Sort  (cost=9915.54..9915.61 rows=28 width=813) (actual time=4458.135..4482.332 rows=123611 loops=1)"
"                    Sort Key: taxi_id"
"                    Sort Method: external merge  Disk: 95088kB"
"                    Buffers: shared hit=9287 read=378439 written=9676, temp read=19634 written=19670"
"                    ->  Bitmap Heap Scan on trips  (cost=11.15..9914.86 rows=28 width=813) (actual time=749.241..4223.281 rows=123611 loops=1)"
"                          Recheck Cond: (st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry, start_point) OR st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry, end_point))"
"                          Rows Removed by Index Recheck: 178359"
"                          Filter: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1372600800) AND (st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry, start_point) OR st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry, end_point)))"
"                          Rows Removed by Filter: 1374299"
"                          Heap Blocks: exact=39994 lossy=332575"
"                          Buffers: shared hit=9287 read=378439 written=9676"
"                          ->  BitmapOr  (cost=11.15..11.15 rows=342 width=0) (actual time=743.889..743.890 rows=0 loops=1)"
"                                Buffers: shared hit=9287 read=5870"
"                                ->  Bitmap Index Scan on gist_start_geom  (cost=0.00..5.57 rows=171 width=0) (actual time=683.374..683.374 rows=1342026 loops=1)"
"                                      Index Cond: (start_point && '0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry)"
"                                      Buffers: shared hit=2257 read=5869"
"                                ->  Bitmap Index Scan on gist_end_geom  (cost=0.00..5.57 rows=171 width=0) (actual time=60.513..60.513 rows=1167284 loops=1)"
"                                      Index Cond: (end_point && '0103000020E610000001000000050000005C8FC2F5285C21C0333333333393444033333333333321C052B81E85EB91444033333333333321C09A99999999994440713D0AD7A37021C09A999999999944405C8FC2F5285C21C03333333333934440'::geometry)"
"                                      Buffers: shared hit=7030 read=1"
"Planning:"
"  Buffers: shared hit=25 read=1"
"Planning Time: 1.592 ms"
"Execution Time: 4535.316 ms"

/* Test Case 1.2: DESCRIBE YOUR CASE HERE */

-- Timeframe: July 1st 2013 to August 1st 2013
-- Area: North East of Porto / ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326)

/* Test Case 1.2 with YOUR_INDEX_METHOD_1 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
-- SEQ SCAN */
SELECT 
    taxi_id, (COUNT(ST_NumPoints(line_geom))-1) / 4 AS total_minutes, COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(
        ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326), 
        start_point
    	) 
	   OR
	   ST_Intersects(
        ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326), 
        end_point
    	) 
	)
	AND  timestamp < '1375279200' 
	AND  timestamp > '1372600800'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT 
    3;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
*/
20000649	101	408
20000333	93	375
20000370	80	321

 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
*/
"Limit  (cost=18767326.73..18767326.73 rows=3 width=20) (actual time=7773.840..7773.866 rows=3 loops=1)"
"  Buffers: shared hit=16189 read=938533 written=1, temp read=4415 written=4427"
"  ->  Sort  (cost=18767326.73..18767327.82 rows=439 width=20) (actual time=7773.838..7773.864 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=16189 read=938533 written=1, temp read=4415 written=4427"
"        ->  Finalize GroupAggregate  (cost=18764438.43..18767321.05 rows=439 width=20) (actual time=7753.263..7773.828 rows=427 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=16189 read=938533 written=1, temp read=4415 written=4427"
"              ->  Gather Merge  (cost=18764438.43..18767307.88 rows=878 width=20) (actual time=7753.253..7773.700 rows=1276 loops=1)"
"                    Workers Planned: 2"
"                    Workers Launched: 2"
"                    Buffers: shared hit=16189 read=938533 written=1, temp read=4415 written=4427"
"                    ->  Partial GroupAggregate  (cost=18763438.41..18766206.52 rows=439 width=20) (actual time=7724.460..7743.938 rows=425 loops=3)"
"                          Group Key: taxi_id"
"                          Buffers: shared hit=16189 read=938533 written=1, temp read=4415 written=4427"
"                          ->  Sort  (cost=18763438.41..18763489.59 rows=20472 width=818) (actual time=7724.443..7738.056 rows=14939 loops=3)"
"                                Sort Key: taxi_id"
"                                Sort Method: external merge  Disk: 11552kB"
"                                Buffers: shared hit=16092 read=938505, temp read=4415 written=4427"
"                                Worker 0:  Sort Method: external merge  Disk: 10808kB"
"                                Worker 1:  Sort Method: external merge  Disk: 12960kB"
"                                ->  Parallel Seq Scan on trips  (cost=0.00..18754552.47 rows=20472 width=818) (actual time=0.451..7664.509 rows=14939 loops=3)"
"                                      Filter: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1372600800) AND (st_intersects('0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry, start_point) OR st_intersects('0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry, end_point)))"
"                                      Rows Removed by Filter: 554322"
"                                      Buffers: shared hit=15978 read=938505"
"Planning Time: 1.889 ms"
"Execution Time: 7779.159 ms"

/* Test Case 1.2: DESCRIBE YOUR CASE HERE */

-- Timeframe: July 1st 2013 to August 1st 2013
-- Area: North East of Porto / ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326)

/* Test Case 1.2 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2
-- B-tree index on timestamp

CREATE INDEX idx_trips_timestamp ON trips USING BRIN (timestamp);

SET enable_seqscan = OFF;

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    taxi_id, (COUNT(ST_NumPoints(line_geom))-1) / 4 AS total_minutes, COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(
        ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326), 
        start_point
    	) 
	   OR
	   ST_Intersects(
        ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326), 
        end_point
    	) 
	)
	AND  timestamp < '1375279200' 
	AND  timestamp > '1372600800'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT 
    3;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
*/
20000649	101	408
20000333	93	375
20000370	80	321

 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
*/
"Limit  (cost=17487632.70..17487632.71 rows=3 width=20) (actual time=428.839..428.884 rows=3 loops=1)"
"  Buffers: shared hit=122 read=148175, temp read=4415 written=4428"
"  ->  Sort  (cost=17487632.70..17487633.80 rows=439 width=20) (actual time=428.838..428.883 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=122 read=148175, temp read=4415 written=4428"
"        ->  Finalize GroupAggregate  (cost=17484744.40..17487627.02 rows=439 width=20) (actual time=413.307..428.772 rows=427 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=122 read=148175, temp read=4415 written=4428"
"              ->  Gather Merge  (cost=17484744.40..17487613.85 rows=878 width=20) (actual time=413.295..428.573 rows=1277 loops=1)"
"                    Workers Planned: 2"
"                    Workers Launched: 2"
"                    Buffers: shared hit=122 read=148175, temp read=4415 written=4428"
"                    ->  Partial GroupAggregate  (cost=17483744.38..17486512.49 rows=439 width=20) (actual time=389.870..400.301 rows=426 loops=3)"
"                          Group Key: taxi_id"
"                          Buffers: shared hit=122 read=148175, temp read=4415 written=4428"
"                          ->  Sort  (cost=17483744.38..17483795.56 rows=20472 width=818) (actual time=389.852..393.768 rows=14939 loops=3)"
"                                Sort Key: taxi_id"
"                                Sort Method: external merge  Disk: 13576kB"
"                                Buffers: shared hit=24 read=148108, temp read=4415 written=4428"
"                                Worker 0:  Sort Method: external merge  Disk: 10840kB"
"                                Worker 1:  Sort Method: external merge  Disk: 10904kB"
"                                ->  Parallel Bitmap Heap Scan on trips  (cost=166.88..17474858.44 rows=20472 width=818) (actual time=4.813..340.500 rows=14939 loops=3)"
"                                      Recheck Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1372600800))"
"                                      Rows Removed by Index Recheck: 51139"
"                                      Filter: (st_intersects('0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry, start_point) OR st_intersects('0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry, end_point))"
"                                      Rows Removed by Filter: 32595"
"                                      Heap Blocks: lossy=24732"
"                                      Buffers: shared hit=11 read=148107"
"                                      ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..154.60 rows=469490 width=0) (actual time=12.661..12.662 rows=1480830 loops=1)"
"                                            Index Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1372600800))"
"                                            Buffers: shared hit=11 read=24"
"Planning:"
"  Buffers: shared hit=1"
"Planning Time: 1.065 ms"
"Execution Time: 430.324 ms"

/* Test Case 1.2: DESCRIBE YOUR CASE HERE */

-- Timeframe: July 1st 2013 to August 1st 2013
-- Area: North East of Porto / ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326)

/* Test Case 1.2 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3
CREATE INDEX gist_start_geom ON trips USING gist(start_point);
CREATE INDEX gist_end_geom ON trips USING gist(end_point);


EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    taxi_id, (COUNT(ST_NumPoints(line_geom))-1) / 4 AS total_minutes, COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(
        ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326), 
        start_point
    	) 
	   OR
	   ST_Intersects(
        ST_GeomFromText('POLYGON((-8.6 41.14, -8.6 41.2, -8.525 41.2, -8.49 41.14, -8.6 41.14))', 4326), 
        end_point
    	) 
	)
	AND  timestamp < '1375279200' 
	AND  timestamp > '1372600800'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT 
    3;

/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
20000649	101	408
20000333	93	375
20000370	80	321
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=9920.07..9920.08 rows=3 width=20) (actual time=5607.213..5607.215 rows=3 loops=1)"
"  Buffers: shared hit=54 read=291984 written=1600, temp read=4413 written=4426"
"  ->  Sort  (cost=9920.07..9920.14 rows=27 width=20) (actual time=5607.212..5607.213 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=54 read=291984 written=1600, temp read=4413 written=4426"
"        ->  GroupAggregate  (cost=9915.54..9919.72 rows=27 width=20) (actual time=5576.544..5607.172 rows=427 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=54 read=291984 written=1600, temp read=4413 written=4426"
"              ->  Sort  (cost=9915.54..9915.61 rows=28 width=813) (actual time=5576.514..5585.118 rows=44816 loops=1)"
"                    Sort Key: taxi_id"
"                    Sort Method: external merge  Disk: 35304kB"
"                    Buffers: shared hit=14 read=291939 written=1600, temp read=4413 written=4426"
"                    ->  Bitmap Heap Scan on trips  (cost=11.15..9914.86 rows=28 width=813) (actual time=104.625..5506.440 rows=44816 loops=1)"
"                          Recheck Cond: (st_intersects('0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry, start_point) OR st_intersects('0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry, end_point))"
"                          Rows Removed by Index Recheck: 690023"
"                          Filter: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1372600800) AND (st_intersects('0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry, start_point) OR st_intersects('0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry, end_point)))"
"                          Rows Removed by Filter: 490135"
"                          Heap Blocks: exact=54049 lossy=233813"
"                          Buffers: shared hit=14 read=291939 written=1600"
"                          ->  BitmapOr  (cost=11.15..11.15 rows=342 width=0) (actual time=98.371..98.372 rows=0 loops=1)"
"                                Buffers: shared hit=13 read=4078"
"                                ->  Bitmap Index Scan on gist_start_geom  (cost=0.00..5.57 rows=171 width=0) (actual time=71.329..71.329 rows=333262 loops=1)"
"                                      Index Cond: (start_point && '0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry)"
"                                      Buffers: shared hit=13 read=2105"
"                                ->  Bitmap Index Scan on gist_end_geom  (cost=0.00..5.57 rows=171 width=0) (actual time=27.041..27.041 rows=320693 loops=1)"
"                                      Index Cond: (end_point && '0103000020E6100000010000000500000033333333333321C052B81E85EB91444033333333333321C09A99999999994440CDCCCCCCCC0C21C09A999999999944407B14AE47E1FA20C052B81E85EB91444033333333333321C052B81E85EB914440'::geometry)"
"                                      Buffers: shared read=1973"
"Planning:"
"  Buffers: shared hit=3 read=1"
"Planning Time: 1.094 ms"
"Execution Time: 5608.963 ms"

/* Test Case 1.3: DESCRIBE YOUR CASE HERE */

-- Timeframe: January 1st 2013 to December 31st 2013
-- Area: South of Porto / ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326)

/* Test Case 1.3 with YOUR_INDEX_METHOD_1 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
-- SEQ SCAN

SELECT 
    taxi_id, (COUNT(ST_NumPoints(line_geom))-1) / 4 AS total_minutes, COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(
        ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326), 
        start_point
    	) 
	   OR
	   ST_Intersects(
        ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326), 
        end_point
    	) 
	)
	AND  timestamp < '1385820000' 
	AND  timestamp > '1356962400'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT 
    3;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
*/
20000344	99	399
20000195	89	360
20000101	79	318

 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
*/
"Limit  (cost=18768296.72..18768296.72 rows=3 width=20) (actual time=8250.431..8252.336 rows=3 loops=1)"
"  Buffers: shared hit=16223 read=938589, temp read=5027 written=5041"
"  ->  Sort  (cost=18768296.72..18768297.81 rows=439 width=20) (actual time=8250.428..8252.332 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=16223 read=938589, temp read=5027 written=5041"
"        ->  Finalize GroupAggregate  (cost=18765180.81..18768291.04 rows=439 width=20) (actual time=8228.213..8252.282 rows=434 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=16223 read=938589, temp read=5027 written=5041"
"              ->  Gather Merge  (cost=18765180.81..18768277.87 rows=878 width=20) (actual time=8228.203..8252.101 rows=1295 loops=1)"
"                    Workers Planned: 2"
"                    Workers Launched: 2"
"                    Buffers: shared hit=16223 read=938589, temp read=5027 written=5041"
"                    ->  Partial GroupAggregate  (cost=18764180.78..18767176.50 rows=439 width=20) (actual time=8210.143..8228.254 rows=432 loops=3)"
"                          Group Key: taxi_id"
"                          Buffers: shared hit=16223 read=938589, temp read=5027 written=5041"
"                          ->  Sort  (cost=18764180.78..18764236.18 rows=22158 width=818) (actual time=8210.117..8221.233 rows=14359 loops=3)"
"                                Sort Key: taxi_id"
"                                Sort Method: external merge  Disk: 14296kB"
"                                Buffers: shared hit=16084 read=938513, temp read=5027 written=5041"
"                                Worker 0:  Sort Method: external merge  Disk: 12336kB"
"                                Worker 1:  Sort Method: external merge  Disk: 13584kB"
"                                ->  Parallel Seq Scan on trips  (cost=0.00..18754552.47 rows=22158 width=818) (actual time=6.446..8098.700 rows=14359 loops=3)"
"                                      Filter: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1356962400) AND (st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry, start_point) OR st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry, end_point)))"
"                                      Rows Removed by Filter: 554902"
"                                      Buffers: shared hit=15970 read=938513"
"Planning Time: 0.552 ms"
"Execution Time: 8255.905 ms"

/* Test Case 1.3: DESCRIBE YOUR CASE HERE */

-- Timeframe: January 1st 2013 to December 31st 2013
-- Area: South of Porto / ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326)

/* Test Case 1.3 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2
-- B-tree index on timestamp

CREATE INDEX idx_trips_timestamp ON trips USING BRIN (timestamp);

SET enable_seqscan = OFF;

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    taxi_id, (COUNT(ST_NumPoints(line_geom))-1) / 4 AS total_minutes, COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(
        ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326), 
        start_point
    	) 
	   OR
	   ST_Intersects(
        ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326), 
        end_point
    	) 
	)
	AND  timestamp < '1385820000' 
	AND  timestamp > '1356962400'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT 
    3;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
*/
20000344	99	399
20000195	89	360
20000101	79	318
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
*/
"Limit  (cost=18790994.54..18790994.55 rows=3 width=20) (actual time=3292.540..3295.868 rows=3 loops=1)"
"  Buffers: shared hit=133 read=473334, temp read=5029 written=5042"
"  ->  Sort  (cost=18790994.54..18790995.64 rows=439 width=20) (actual time=3292.539..3295.866 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=133 read=473334, temp read=5029 written=5042"
"        ->  Finalize GroupAggregate  (cost=18787878.63..18790988.87 rows=439 width=20) (actual time=3277.747..3295.806 rows=434 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=133 read=473334, temp read=5029 written=5042"
"              ->  Gather Merge  (cost=18787878.63..18790975.70 rows=878 width=20) (actual time=3277.739..3295.661 rows=1296 loops=1)"
"                    Workers Planned: 2"
"                    Workers Launched: 2"
"                    Buffers: shared hit=133 read=473334, temp read=5029 written=5042"
"                    ->  Partial GroupAggregate  (cost=18786878.61..18789874.33 rows=439 width=20) (actual time=3253.685..3264.252 rows=432 loops=3)"
"                          Group Key: taxi_id"
"                          Buffers: shared hit=133 read=473334, temp read=5029 written=5042"
"                          ->  Sort  (cost=18786878.61..18786934.01 rows=22158 width=818) (actual time=3253.640..3257.223 rows=14359 loops=3)"
"                                Sort Key: taxi_id"
"                                Sort Method: external merge  Disk: 13424kB"
"                                Buffers: shared hit=24 read=473228, temp read=5029 written=5042"
"                                Worker 0:  Sort Method: external merge  Disk: 13064kB"
"                                Worker 1:  Sort Method: external merge  Disk: 13744kB"
"                                ->  Parallel Bitmap Heap Scan on trips  (cost=340.92..18777250.30 rows=22158 width=818) (actual time=11.709..3225.143 rows=14359 loops=3)"
"                                      Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1356962400))"
"                                      Rows Removed by Index Recheck: 44361"
"                                      Filter: (st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry, start_point) OR st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry, end_point))"
"                                      Rows Removed by Filter: 221878"
"                                      Heap Blocks: lossy=66060"
"                                      Buffers: shared hit=11 read=473227"
"                                      ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..327.62 rows=1707701 width=0) (actual time=32.473..32.473 rows=4732030 loops=1)"
"                                            Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1356962400))"
"                                            Buffers: shared hit=11 read=24"
"Planning:"
"  Buffers: shared hit=1"
"Planning Time: 0.684 ms"
"Execution Time: 3296.816 ms"


/* Test Case 1.3: DESCRIBE YOUR CASE HERE */

-- Timeframe: January 1st 2013 to December 31st 2013
-- Area: South of Porto / ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326)

/* Test Case 1.3 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3

CREATE INDEX gist_start_geom ON trips USING gist(start_point);
CREATE INDEX gist_end_geom ON trips USING gist(end_point);

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    taxi_id, (COUNT(ST_NumPoints(line_geom))-1) / 4 AS total_minutes, COUNT(taxi_id) AS trip_counts
FROM 
    trips
WHERE 
    (ST_Intersects(
        ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326), 
        start_point
    	) 
	   OR
	   ST_Intersects(
        ST_GeomFromText('POLYGON((-8.68 41.14, -8.68 41, -8.45 41, -8.6 41.14, -8.68 41.14))', 4326), 
        end_point
    	) 
	)
	AND  timestamp < '1385820000' 
	AND  timestamp > '1356962400'
GROUP BY 
    taxi_id
ORDER BY 
    total_minutes DESC
LIMIT 
    3;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
20000344	99	399
20000195	89	360
20000101	79	318
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=13721501.29..13721501.29 rows=3 width=20) (actual time=485.224..487.214 rows=3 loops=1)"
"  Buffers: shared hit=120 read=97133, temp read=5031 written=5044"
"  ->  Sort  (cost=13721501.29..13721502.38 rows=439 width=20) (actual time=485.223..487.212 rows=3 loops=1)"
"        Sort Key: (((count(st_numpoints(line_geom)) - 1) / 4)) DESC"
"        Sort Method: top-N heapsort  Memory: 25kB"
"        Buffers: shared hit=120 read=97133, temp read=5031 written=5044"
"        ->  Finalize GroupAggregate  (cost=13718385.38..13721495.61 rows=439 width=20) (actual time=469.968..487.173 rows=434 loops=1)"
"              Group Key: taxi_id"
"              Buffers: shared hit=120 read=97133, temp read=5031 written=5044"
"              ->  Gather Merge  (cost=13718385.38..13721482.44 rows=878 width=20) (actual time=469.952..487.038 rows=1297 loops=1)"
"                    Workers Planned: 2"
"                    Workers Launched: 2"
"                    Buffers: shared hit=120 read=97133, temp read=5031 written=5044"
"                    ->  Partial GroupAggregate  (cost=13717385.35..13720381.07 rows=439 width=20) (actual time=446.630..456.701 rows=432 loops=3)"
"                          Group Key: taxi_id"
"                          Buffers: shared hit=120 read=97133, temp read=5031 written=5044"
"                          ->  Sort  (cost=13717385.35..13717440.75 rows=22158 width=818) (actual time=446.610..449.599 rows=14359 loops=3)"
"                                Sort Key: taxi_id"
"                                Sort Method: external merge  Disk: 15040kB"
"                                Buffers: shared hit=11 read=97027, temp read=5031 written=5044"
"                                Worker 0:  Sort Method: external merge  Disk: 12840kB"
"                                Worker 1:  Sort Method: external merge  Disk: 12368kB"
"                                ->  Parallel Bitmap Heap Scan on trips  (cost=4057.27..13707757.04 rows=22158 width=818) (actual time=69.092..393.982 rows=14359 loops=3)"
"                                      Recheck Cond: (st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry, start_point) OR st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry, end_point))"
"                                      Rows Removed by Index Recheck: 47130"
"                                      Filter: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1356962400) AND (st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry, start_point) OR st_intersects('0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry, end_point)))"
"                                      Rows Removed by Filter: 20396"
"                                      Heap Blocks: exact=22316 lossy=12765"
"                                      Buffers: shared read=97024"
"                                      ->  BitmapOr  (cost=4057.27..4057.27 rows=129314 width=0) (actual time=84.188..84.188 rows=0 loops=1)"
"                                            Buffers: shared read=1103"
"                                            ->  Bitmap Index Scan on gist_start_geom  (cost=0.00..825.33 rows=25722 width=0) (actual time=23.578..23.578 rows=15105 loops=1)"
"                                                  Index Cond: (start_point && '0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry)"
"                                                  Buffers: shared read=359"
"                                            ->  Bitmap Index Scan on gist_end_geom  (cost=0.00..3205.35 rows=103592 width=0) (actual time=60.607..60.607 rows=101130 loops=1)"
"                                                  Index Cond: (end_point && '0103000020E610000001000000050000005C8FC2F5285C21C052B81E85EB9144405C8FC2F5285C21C000000000008044406666666666E620C0000000000080444033333333333321C052B81E85EB9144405C8FC2F5285C21C052B81E85EB914440'::geometry)"
"                                                  Buffers: shared read=744"
"Planning Time: 1.757 ms"
"Execution Time: 488.399 ms"


/* 
Query Task 2:
DESCRIBE YOUR QUERY TASK HERE 
Find the most common trip taken by customers in a time period which enables the taxi company to place a taxi stand.
The trip must be ordered on the street.
2 trips are considered to be the same when the HausdorffDistance between the 2 trips are smaller than a given threshold.
The start & end points must be within another given threshold.
*/
/* Test Case 2.1: DESCRIBE YOUR CASE HERE */
/*
Similarity threshold(lower is more similar) = 0.008
Start point distance threshold = 0.005
End point distance threshold = 0.005
Time period from 1383228000 to 1385820000 || 2013 Nov 1st 00:00:00 - 2013 Dec 1st 00:00:00
*/
/* Test Case 2.1 with YOUR_INDEX_METHOD_1 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
-- INDEX method 1 - SEQ SCAN
EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1385820000' 
	AND  a.timestamp > '1383228000'
	AND a.call_type = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1385820000' 
	AND  b.timestamp > '1383228000'
	AND b.call_type = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.001
	AND ST_Distance(a.end_point, b.end_point) < 0.001
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.005
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
"1383274597620000344"	"POINT(-8.613918 41.146821)"	"POINT(-8.602245 41.155632)"	81
 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=20266833.92..20266835.18 rows=1 width=156) (actual time=553637.178..553637.246 rows=1 loops=1)"
"  Buffers: shared hit=30150 read=1881272, temp read=174953326 written=9168"
"  ->  Result  (cost=20266833.92..20266921.03 rows=69 width=156) (actual time=553637.176..553637.244 rows=1 loops=1)"
"        Buffers: shared hit=30150 read=1881272, temp read=174953326 written=9168"
"        ->  Sort  (cost=20266833.92..20266834.09 rows=69 width=92) (actual time=553637.115..553637.182 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=30150 read=1881272, temp read=174953326 written=9168"
"              ->  GroupAggregate  (cost=10045086.06..20266833.57 rows=69 width=92) (actual time=25927.928..553623.322 rows=12516 loops=1)"
"                    Group Key: a.trip_id, a.start_point, a.end_point"
"                    Buffers: shared hit=30147 read=1881272, temp read=174953326 written=9168"
"                    ->  Nested Loop  (cost=10045086.06..20266831.12 rows=176 width=104) (actual time=25862.948..553454.269 rows=61560 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.001'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.001'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.005'::double precision))"
"                          Rows Removed by Join Filter: 1465526529"
"                          Buffers: shared hit=30147 read=1881272, temp read=174953326 written=9168"
"                          ->  Gather Merge  (cost=10044086.06..10044094.10 rows=69 width=898) (actual time=12695.284..12810.915 rows=38283 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=13084 read=942415, temp read=4586 written=4598"
"                                ->  Sort  (cost=10043086.04..10043086.11 rows=29 width=898) (actual time=12668.986..12706.787 rows=12761 loops=3)"
"                                      Sort Key: a.trip_id, a.start_point, a.end_point"
"                                      Sort Method: external merge  Disk: 11808kB"
"                                      Buffers: shared hit=13084 read=942415, temp read=4586 written=4598"
"                                      Worker 0:  Sort Method: external merge  Disk: 12024kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 12856kB"
"                                      ->  Parallel Seq Scan on trips a  (cost=0.00..10043085.33 rows=29 width=898) (actual time=266.656..12580.132 rows=12761 loops=3)"
"                                            Filter: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND (call_type = 'C'::bpchar) AND (st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 556500"
"                                            Buffers: shared hit=12951 read=942414"
"                          ->  Materialize  (cost=1000.00..10044092.58 rows=69 width=898) (actual time=0.009..7.025 rows=38283 loops=38283)"
"                                Buffers: shared hit=16525 read=938857, temp read=174948740 written=4570"
"                                ->  Gather  (cost=1000.00..10044092.23 rows=69 width=898) (actual time=290.322..13069.738 rows=38283 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=16525 read=938857"
"                                      ->  Parallel Seq Scan on trips b  (cost=0.00..10043085.33 rows=29 width=898) (actual time=241.409..13077.515 rows=12761 loops=3)"
"                                            Filter: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND (call_type = 'C'::bpchar) AND (st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 556500"
"                                            Buffers: shared hit=16525 read=938857"
"Planning:"
"  Buffers: shared hit=245 read=24 dirtied=1"
"Planning Time: 9.429 ms"
"Execution Time: 554261.223 ms"

/* Test Case 2.1: DESCRIBE YOUR CASE HERE */
/*
Similarity threshold(lower is more similar) = 0.008
Start point distance threshold = 0.005
End point distance threshold = 0.005
Time period from 1383228000 to 1385820000 || 2013 Nov 1st 00:00:00 - 2013 Dec 1st 00:00:00
*/
/* Test Case 2.1 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2

CREATE INDEX idx_trips_timestamp ON trips(timestamp);
CREATE INDEX idx_trips_call_type ON trips USING HASH("call_type");

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1385820000' 
	AND  a.timestamp > '1383228000'
	AND a.call_type = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1385820000' 
	AND  b.timestamp > '1383228000'
	AND b.call_type = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.001
	AND ST_Distance(a.end_point, b.end_point) < 0.001
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.005
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 "1383274597620000344"	"POINT(-8.613918 41.146821)"	"POINT(-8.602245 41.155632)"	81
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=938705.04..938706.30 rows=1 width=156) (actual time=522445.433..522445.941 rows=1 loops=1)"
"  Buffers: shared hit=4665 read=50156, temp read=174953326 written=9169"
"  ->  Result  (cost=938705.04..938792.15 rows=69 width=156) (actual time=522445.431..522445.940 rows=1 loops=1)"
"        Buffers: shared hit=4665 read=50156, temp read=174953326 written=9169"
"        ->  Sort  (cost=938705.04..938705.21 rows=69 width=92) (actual time=522443.616..522444.125 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=4665 read=50156, temp read=174953326 written=9169"
"              ->  GroupAggregate  (cost=400455.99..938704.69 rows=69 width=92) (actual time=915.991..522431.881 rows=12516 loops=1)"
"                    Group Key: a.trip_id, a.start_point, a.end_point"
"                    Buffers: shared hit=4662 read=50156, temp read=174953326 written=9169"
"                    ->  Nested Loop  (cost=400455.99..938702.24 rows=176 width=104) (actual time=847.406..522278.071 rows=61560 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.001'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.001'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.005'::double precision))"
"                          Rows Removed by Join Filter: 1465526529"
"                          Buffers: shared hit=4662 read=50156, temp read=174953326 written=9169"
"                          ->  Gather Merge  (cost=380021.62..380029.66 rows=69 width=898) (actual time=664.209..772.437 rows=38283 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=2108 read=25061, temp read=4586 written=4599"
"                                ->  Sort  (cost=379021.60..379021.67 rows=29 width=898) (actual time=655.748..682.579 rows=12761 loops=3)"
"                                      Sort Key: a.trip_id, a.start_point, a.end_point"
"                                      Sort Method: external merge  Disk: 13672kB"
"                                      Buffers: shared hit=2108 read=25061, temp read=4586 written=4599"
"                                      Worker 0:  Sort Method: external merge  Disk: 12048kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 10968kB"
"                                      ->  Parallel Bitmap Heap Scan on trips a  (cost=19434.37..379020.89 rows=29 width=898) (actual time=44.677..570.461 rows=12761 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND (call_type = 'C'::bpchar))"
"                                            Rows Removed by Index Recheck: 2545"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1276"
"                                            Heap Blocks: exact=9139"
"                                            Buffers: shared hit=2074 read=25061"
"                                            ->  BitmapAnd  (cost=19434.37..19434.37 rows=41669 width=0) (actual time=44.907..44.908 rows=0 loops=1)"
"                                                  Buffers: shared hit=1296 read=384"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..2849.88 rows=136145 width=0) (actual time=10.364..10.365 rows=140279 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000))"
"                                                        Buffers: shared read=384"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type  (cost=0.00..16584.21 rows=522695 width=0) (actual time=33.025..33.025 rows=526717 loops=1)"
"                                                        Index Cond: (call_type = 'C'::bpchar)"
"                                                        Buffers: shared hit=1296"
"                          ->  Materialize  (cost=20434.37..380028.14 rows=69 width=898) (actual time=0.003..6.582 rows=38283 loops=38283)"
"                                Buffers: shared hit=2016 read=25095, temp read=174948740 written=4570"
"                                ->  Gather  (cost=20434.37..380027.79 rows=69 width=898) (actual time=43.422..91.593 rows=38283 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=2016 read=25095"
"                                      ->  Parallel Bitmap Heap Scan on trips b  (cost=19434.37..379020.89 rows=29 width=898) (actual time=36.097..106.851 rows=12761 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND (call_type = 'C'::bpchar))"
"                                            Rows Removed by Index Recheck: 2545"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1276"
"                                            Heap Blocks: exact=4472"
"                                            Buffers: shared hit=2016 read=25095"
"                                            ->  BitmapAnd  (cost=19434.37..19434.37 rows=41669 width=0) (actual time=40.743..40.743 rows=0 loops=1)"
"                                                  Buffers: shared hit=1295 read=384"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..2849.88 rows=136145 width=0) (actual time=8.002..8.002 rows=140279 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000))"
"                                                        Buffers: shared read=384"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type  (cost=0.00..16584.21 rows=522695 width=0) (actual time=31.439..31.439 rows=526717 loops=1)"
"                                                        Index Cond: (call_type = 'C'::bpchar)"
"                                                        Buffers: shared hit=1295"
"Planning:"
"  Buffers: shared hit=271 read=26 dirtied=2"
"Planning Time: 5.007 ms"
"Execution Time: 522511.287 ms"

 /* Test Case 2.1: DESCRIBE YOUR CASE HERE */
/*
Similarity threshold(lower is more similar) = 0.008
Start point distance threshold = 0.005
End point distance threshold = 0.005
Time period from 1383228000 to 1385820000 || 2013 Nov 1st 00:00:00 - 2013 Dec 1st 00:00:00
*/
/* Test Case 2.1 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3
CREATE INDEX idx_trips_timestamp ON trips(timestamp);
CREATE INDEX idx_trips_call_type_str ON trips USING GIN(call_type_str gin_trgm_ops);

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1385820000' 
	AND  a.timestamp > '1383228000'
	AND a.call_type_str = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1385820000' 
	AND  b.timestamp > '1383228000'
	AND b.call_type_str = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.001
	AND ST_Distance(a.end_point, b.end_point) < 0.001
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.005
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
  "1383274597620000344"	"POINT(-8.613918 41.146821)"	"POINT(-8.602245 41.155632)"	81
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
 "Limit  (cost=956681.37..956682.63 rows=1 width=156) (actual time=548487.493..548487.924 rows=1 loops=1)"
"  Buffers: shared hit=2199 read=57399, temp read=174953327 written=9169"
"  ->  Result  (cost=956681.37..956772.27 rows=72 width=156) (actual time=548487.490..548487.920 rows=1 loops=1)"
"        Buffers: shared hit=2199 read=57399, temp read=174953327 written=9169"
"        ->  Sort  (cost=956681.37..956681.55 rows=72 width=92) (actual time=548487.478..548487.908 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=2199 read=57399, temp read=174953327 written=9169"
"              ->  GroupAggregate  (cost=391368.82..956681.01 rows=72 width=92) (actual time=774.554..548474.714 rows=12516 loops=1)"
"                    Group Key: a.trip_id"
"                    Buffers: shared hit=2199 read=57399, temp read=174953327 written=9169"
"                    ->  Nested Loop  (cost=391368.82..956679.33 rows=192 width=104) (actual time=676.681..548297.624 rows=61560 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.001'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.001'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.005'::double precision))"
"                          Rows Removed by Join Filter: 1465526529"
"                          Buffers: shared hit=2199 read=57399, temp read=174953327 written=9169"
"                          ->  Gather Merge  (cost=381073.84..381082.23 rows=72 width=893) (actual time=463.332..599.092 rows=38283 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=829 read=28709, temp read=4587 written=4599"
"                                ->  Sort  (cost=380073.82..380073.89 rows=30 width=893) (actual time=432.529..468.344 rows=12761 loops=3)"
"                                      Sort Key: a.trip_id"
"                                      Sort Method: external merge  Disk: 12000kB"
"                                      Buffers: shared hit=829 read=28709, temp read=4587 written=4599"
"                                      Worker 0:  Sort Method: external merge  Disk: 12416kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 12280kB"
"                                      ->  Parallel Bitmap Heap Scan on trips a  (cost=9294.98..380073.08 rows=30 width=893) (actual time=89.678..377.358 rows=12761 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND ((call_type_str)::text = 'C'::text))"
"                                            Rows Removed by Index Recheck: 20017"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1275"
"                                            Heap Blocks: exact=9188"
"                                            Buffers: shared hit=813 read=28709"
"                                            ->  BitmapAnd  (cost=9294.98..9294.98 rows=43025 width=0) (actual time=113.509..113.510 rows=0 loops=1)"
"                                                  Buffers: shared hit=81 read=979"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4367.52 rows=137109 width=0) (actual time=34.788..34.788 rows=140275 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000))"
"                                                        Buffers: shared read=765"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type_str  (cost=0.00..4927.17 rows=535356 width=0) (actual time=77.068..77.068 rows=526656 loops=1)"
"                                                        Index Cond: ((call_type_str)::text = 'C'::text)"
"                                                        Buffers: shared hit=81 read=214"
"                          ->  Materialize  (cost=10294.98..381080.64 rows=72 width=893) (actual time=0.004..7.100 rows=38283 loops=38283)"
"                                Buffers: shared hit=832 read=28690, temp read=174948740 written=4570"
"                                ->  Gather  (cost=10294.98..381080.28 rows=72 width=893) (actual time=72.180..133.360 rows=38283 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=832 read=28690"
"                                      ->  Parallel Bitmap Heap Scan on trips b  (cost=9294.98..380073.08 rows=30 width=893) (actual time=65.087..151.467 rows=12761 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND ((call_type_str)::text = 'C'::text))"
"                                            Rows Removed by Index Recheck: 20017"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1275"
"                                            Heap Blocks: exact=6375"
"                                            Buffers: shared hit=832 read=28690"
"                                            ->  BitmapAnd  (cost=9294.98..9294.98 rows=43025 width=0) (actual time=69.191..69.192 rows=0 loops=1)"
"                                                  Buffers: shared hit=81 read=979"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4367.52 rows=137109 width=0) (actual time=9.732..9.732 rows=140275 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000))"
"                                                        Buffers: shared read=765"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type_str  (cost=0.00..4927.17 rows=535356 width=0) (actual time=57.737..57.737 rows=526656 loops=1)"
"                                                        Index Cond: ((call_type_str)::text = 'C'::text)"
"                                                        Buffers: shared hit=81 read=214"
"Planning:"
"  Buffers: shared hit=2 read=2"
"Planning Time: 2.769 ms"
"Execution Time: 548494.211 ms"


 /* Test Case 2.2: DESCRIBE YOUR CASE HERE */
/* 
Similarity threshold(lower is more similar) = 0.005
Start point distance threshold = 0.001
End point distance threshold = 0.001
Time period from 1383228000 to 1385820000 || 2013 Nov 1st 00:00:00 - 2013 Dec 1st 00:00:00
*/
/* Test Case 2.2 with YOUR_INDEX_METHOD_1 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
-- SEQ SCAN

SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1385820000' 
	AND  a.timestamp > '1383228000'
	AND a.call_type = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1385820000' 
	AND  b.timestamp > '1383228000'
	AND b.call_type = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.005
	AND ST_Distance(a.end_point, b.end_point) < 0.005
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.008
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
"1384363604620000222"	"POINT(-8.612487 41.146119)"	"POINT(-8.606043 41.155209)"	602
 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=20266833.92..20266835.18 rows=1 width=156) (actual time=675532.998..675533.070 rows=1 loops=1)"
"  Buffers: shared hit=39364 read=1878746, temp read=174953326 written=9168"
"  ->  Result  (cost=20266833.92..20266921.03 rows=69 width=156) (actual time=675532.997..675533.069 rows=1 loops=1)"
"        Buffers: shared hit=39364 read=1878746, temp read=174953326 written=9168"
"        ->  Sort  (cost=20266833.92..20266834.09 rows=69 width=92) (actual time=675532.976..675533.048 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=39364 read=1878746, temp read=174953326 written=9168"
"              ->  GroupAggregate  (cost=10045086.06..20266833.57 rows=69 width=92) (actual time=20850.063..675496.768 rows=30921 loops=1)"
"                    Group Key: a.trip_id, a.start_point, a.end_point"
"                    Buffers: shared hit=39364 read=1878746, temp read=174953326 written=9168"
"                    ->  Nested Loop  (cost=10045086.06..20266831.12 rows=176 width=104) (actual time=11449.276..674104.629 rows=1626462 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.005'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.005'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.008'::double precision))"
"                          Rows Removed by Join Filter: 1463961627"
"                          Buffers: shared hit=39364 read=1878746, temp read=174953326 written=9168"
"                          ->  Gather Merge  (cost=10044086.06..10044094.10 rows=69 width=898) (actual time=9961.309..10088.074 rows=38283 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=15380 read=940096, temp read=4586 written=4598"
"                                ->  Sort  (cost=10043086.04..10043086.11 rows=29 width=898) (actual time=9934.143..9970.033 rows=12761 loops=3)"
"                                      Sort Key: a.trip_id, a.start_point, a.end_point"
"                                      Sort Method: external merge  Disk: 10264kB"
"                                      Buffers: shared hit=15380 read=940096, temp read=4586 written=4598"
"                                      Worker 0:  Sort Method: external merge  Disk: 13928kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 12496kB"
"                                      ->  Parallel Seq Scan on trips a  (cost=0.00..10043085.33 rows=29 width=898) (actual time=256.092..9879.983 rows=12761 loops=3)"
"                                            Filter: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND (call_type = 'C'::bpchar) AND (st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 556500"
"                                            Buffers: shared hit=15246 read=940096"
"                          ->  Materialize  (cost=1000.00..10044092.58 rows=69 width=898) (actual time=0.002..7.276 rows=38283 loops=38283)"
"                                Buffers: shared hit=16732 read=938650, temp read=174948740 written=4570"
"                                ->  Gather  (cost=1000.00..10044092.23 rows=69 width=898) (actual time=0.461..10742.735 rows=38283 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=16732 read=938650"
"                                      ->  Parallel Seq Scan on trips b  (cost=0.00..10043085.33 rows=29 width=898) (actual time=71.604..10814.827 rows=12761 loops=3)"
"                                            Filter: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND (call_type = 'C'::bpchar) AND (st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 556500"
"                                            Buffers: shared hit=16732 read=938650"
"Planning:"
"  Buffers: shared read=1"
"Planning Time: 2.509 ms"
"Execution Time: 675538.017 ms"
/* Test Case 2.2: DESCRIBE YOUR CASE HERE */
/* 
Similarity threshold(lower is more similar) = 0.005
Start point distance threshold = 0.001
End point distance threshold = 0.001
Time period from 1383228000 to 1385820000 || 2013 Nov 1st 00:00:00 - 2013 Dec 1st 00:00:00
*/
/* Test Case 2.2 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2
CREATE INDEX idx_trips_timestamp ON trips(timestamp);
CREATE INDEX idx_trips_call_type ON trips USING HASH("call_type");

SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1385820000' 
	AND  a.timestamp > '1383228000'
	AND a.call_type = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1385820000' 
	AND  b.timestamp > '1383228000'
	AND b.call_type = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.005
	AND ST_Distance(a.end_point, b.end_point) < 0.005
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.008
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 "1384363604620000222"	"POINT(-8.612487 41.146119)"	"POINT(-8.606043 41.155209)"	602
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
 "Limit  (cost=981519.29..981520.56 rows=1 width=156) (actual time=633542.925..633543.459 rows=1 loops=1)"
"  Buffers: shared hit=11280 read=57065 written=2297, temp read=174953327 written=9169"
"  ->  Result  (cost=981519.29..981610.19 rows=72 width=156) (actual time=633542.924..633543.458 rows=1 loops=1)"
"        Buffers: shared hit=11280 read=57065 written=2297, temp read=174953327 written=9169"
"        ->  Sort  (cost=981519.29..981519.47 rows=72 width=92) (actual time=633540.864..633541.398 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=11280 read=57065 written=2297, temp read=174953327 written=9169"
"              ->  GroupAggregate  (cost=415861.02..981518.93 rows=72 width=92) (actual time=1101.620..633512.177 rows=30921 loops=1)"
"                    Group Key: a.trip_id"
"                    Buffers: shared hit=11277 read=57065 written=2297, temp read=174953327 written=9169"
"                    ->  Nested Loop  (cost=415861.02..981517.25 rows=192 width=104) (actual time=960.936..632756.508 rows=1626462 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.005'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.005'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.008'::double precision))"
"                          Rows Removed by Join Filter: 1463961627"
"                          Buffers: shared hit=11277 read=57065 written=2297, temp read=174953327 written=9169"
"                          ->  Gather Merge  (cost=393492.80..393501.19 rows=72 width=893) (actual time=901.646..1017.698 rows=38283 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=2010 read=28555, temp read=4587 written=4599"
"                                ->  Sort  (cost=392492.78..392492.85 rows=30 width=893) (actual time=879.807..911.758 rows=12761 loops=3)"
"                                      Sort Key: a.trip_id"
"                                      Sort Method: external merge  Disk: 12688kB"
"                                      Buffers: shared hit=2010 read=28555, temp read=4587 written=4599"
"                                      Worker 0:  Sort Method: external merge  Disk: 11800kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 12208kB"
"                                      ->  Parallel Bitmap Heap Scan on trips a  (cost=21368.22..392492.04 rows=30 width=893) (actual time=76.965..824.376 rows=12761 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND (call_type = 'C'::bpchar))"
"                                            Rows Removed by Index Recheck: 20021"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1275"
"                                            Heap Blocks: exact=9458"
"                                            Buffers: shared hit=1994 read=28555"
"                                            ->  BitmapAnd  (cost=21368.22..21368.22 rows=43067 width=0) (actual time=79.690..79.691 rows=0 loops=1)"
"                                                  Buffers: shared hit=1295 read=765"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4368.86 rows=137243 width=0) (actual time=28.960..28.960 rows=140275 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000))"
"                                                        Buffers: shared read=765"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type  (cost=0.00..16999.08 rows=535877 width=0) (actual time=49.211..49.211 rows=526656 loops=1)"
"                                                        Index Cond: (call_type = 'C'::bpchar)"
"                                                        Buffers: shared hit=1295"
"                          ->  Materialize  (cost=22368.22..393499.60 rows=72 width=893) (actual time=0.003..6.627 rows=38283 loops=38283)"
"                                Buffers: shared hit=2015 read=28510 written=2297, temp read=174948740 written=4570"
"                                ->  Gather  (cost=22368.22..393499.24 rows=72 width=893) (actual time=57.473..148.731 rows=38283 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=2015 read=28510 written=2297"
"                                      ->  Parallel Bitmap Heap Scan on trips b  (cost=21368.22..392492.04 rows=30 width=893) (actual time=43.094..152.477 rows=12761 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND (call_type = 'C'::bpchar))"
"                                            Rows Removed by Index Recheck: 20021"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1275"
"                                            Heap Blocks: exact=6016"
"                                            Buffers: shared hit=2015 read=28510 written=2297"
"                                            ->  BitmapAnd  (cost=21368.22..21368.22 rows=43067 width=0) (actual time=54.413..54.424 rows=0 loops=1)"
"                                                  Buffers: shared hit=1294 read=765"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4368.86 rows=137243 width=0) (actual time=20.093..20.094 rows=140275 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000))"
"                                                        Buffers: shared read=765"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type  (cost=0.00..16999.08 rows=535877 width=0) (actual time=33.059..33.059 rows=526656 loops=1)"
"                                                        Index Cond: (call_type = 'C'::bpchar)"
"                                                        Buffers: shared hit=1294"
"Planning:"
"  Buffers: shared hit=282 read=25 dirtied=3"
"Planning Time: 7.598 ms"
"Execution Time: 633691.420 ms"

 /* Test Case 2.2: DESCRIBE YOUR CASE HERE */
 /* 
Similarity threshold(lower is more similar) = 0.005
Start point distance threshold = 0.001
End point distance threshold = 0.001
Time period from 1383228000 to 1385820000 || 2013 Nov 1st 00:00:00 - 2013 Dec 1st 00:00:00
*/
/* Test Case 2.2 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3
CREATE INDEX idx_trips_timestamp ON trips(timestamp);
CREATE INDEX idx_trips_call_type_str ON trips USING GIN(call_type_str gin_trgm_ops);

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1385820000' 
	AND  a.timestamp > '1383228000'
	AND a.call_type_str = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1385820000' 
	AND  b.timestamp > '1383228000'
	AND b.call_type_str = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.005
	AND ST_Distance(a.end_point, b.end_point) < 0.005
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.008
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 "1384363604620000222"	"POINT(-8.612487 41.146119)"	"POINT(-8.606043 41.155209)"	602
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=956681.37..956682.63 rows=1 width=156) (actual time=667047.615..667048.076 rows=1 loops=1)"
"  Buffers: shared hit=8908 read=57404, temp read=174953325 written=9167"
"  ->  Result  (cost=956681.37..956772.27 rows=72 width=156) (actual time=667047.614..667048.070 rows=1 loops=1)"
"        Buffers: shared hit=8908 read=57404, temp read=174953325 written=9167"
"        ->  Sort  (cost=956681.37..956681.55 rows=72 width=92) (actual time=667047.609..667048.065 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=8908 read=57404, temp read=174953325 written=9167"
"              ->  GroupAggregate  (cost=391368.82..956681.01 rows=72 width=92) (actual time=608.462..667014.555 rows=30921 loops=1)"
"                    Group Key: a.trip_id"
"                    Buffers: shared hit=8908 read=57404, temp read=174953325 written=9167"
"                    ->  Nested Loop  (cost=391368.82..956679.33 rows=192 width=104) (actual time=503.191..665844.273 rows=1626462 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.005'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.005'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.008'::double precision))"
"                          Rows Removed by Join Filter: 1463961627"
"                          Buffers: shared hit=8908 read=57404, temp read=174953325 written=9167"
"                          ->  Gather Merge  (cost=381073.84..381082.23 rows=72 width=893) (actual time=417.306..556.555 rows=38283 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=825 read=28713, temp read=4585 written=4597"
"                                ->  Sort  (cost=380073.82..380073.89 rows=30 width=893) (actual time=391.765..432.091 rows=12761 loops=3)"
"                                      Sort Key: a.trip_id"
"                                      Sort Method: external merge  Disk: 13232kB"
"                                      Buffers: shared hit=825 read=28713, temp read=4585 written=4597"
"                                      Worker 0:  Sort Method: external merge  Disk: 11984kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 11464kB"
"                                      ->  Parallel Bitmap Heap Scan on trips a  (cost=9294.98..380073.08 rows=30 width=893) (actual time=106.793..358.172 rows=12761 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND ((call_type_str)::text = 'C'::text))"
"                                            Rows Removed by Index Recheck: 20017"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1275"
"                                            Heap Blocks: exact=9811"
"                                            Buffers: shared hit=812 read=28710"
"                                            ->  BitmapAnd  (cost=9294.98..9294.98 rows=43025 width=0) (actual time=126.539..126.540 rows=0 loops=1)"
"                                                  Buffers: shared hit=81 read=979"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4367.52 rows=137109 width=0) (actual time=32.180..32.181 rows=140275 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000))"
"                                                        Buffers: shared read=765"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type_str  (cost=0.00..4927.17 rows=535356 width=0) (actual time=92.594..92.594 rows=526656 loops=1)"
"                                                        Index Cond: ((call_type_str)::text = 'C'::text)"
"                                                        Buffers: shared hit=81 read=214"
"                          ->  Materialize  (cost=10294.98..381080.64 rows=72 width=893) (actual time=0.005..7.222 rows=38283 loops=38283)"
"                                Buffers: shared hit=831 read=28691, temp read=174948740 written=4570"
"                                ->  Gather  (cost=10294.98..381080.28 rows=72 width=893) (actual time=83.855..136.616 rows=38283 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=831 read=28691"
"                                      ->  Parallel Bitmap Heap Scan on trips b  (cost=9294.98..380073.08 rows=30 width=893) (actual time=69.099..147.073 rows=12761 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000) AND ((call_type_str)::text = 'C'::text))"
"                                            Rows Removed by Index Recheck: 20017"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1275"
"                                            Heap Blocks: exact=6130"
"                                            Buffers: shared hit=831 read=28691"
"                                            ->  BitmapAnd  (cost=9294.98..9294.98 rows=43025 width=0) (actual time=80.706..80.706 rows=0 loops=1)"
"                                                  Buffers: shared hit=81 read=979"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4367.52 rows=137109 width=0) (actual time=21.002..21.002 rows=140275 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1385820000) AND (""timestamp"" > 1383228000))"
"                                                        Buffers: shared read=765"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type_str  (cost=0.00..4927.17 rows=535356 width=0) (actual time=58.060..58.060 rows=526656 loops=1)"
"                                                        Index Cond: ((call_type_str)::text = 'C'::text)"
"                                                        Buffers: shared hit=81 read=214"
"Planning:"
"  Buffers: shared hit=1 read=3"
"Planning Time: 2.977 ms"
"Execution Time: 667055.658 ms"

/* Test Case 2.3: DESCRIBE YOUR CASE HERE */
/* 
Similarity threshold(lower is more similar) = 0.01
Start point distance threshold = 0.003
End point distance threshold = 0.003
Time period from 1370008800 to 1375279200 || 2013 Jun 1st 00:00:00 - 2013 Aug 1st 00:00:00
*/
/* Test Case 2.3 with YOUR_INDEX_METHOD_1 */
-- SEQ SCAN
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1375279200' 
	AND  a.timestamp > '1370008800'
	AND a.call_type = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1375279200' 
	AND  b.timestamp > '1370008800'
	AND b.call_type = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.003
	AND ST_Distance(a.end_point, b.end_point) < 0.003
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.01
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
"1373499628620000601"	"POINT(-8.612775 41.140395)"	"POINT(-8.608815 41.147118)"	326
 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=20282706.83..20282708.09 rows=1 width=156) (actual time=576042.584..576042.671 rows=1 loops=1)"
"  Buffers: shared hit=33465 read=1877385, temp read=161603140 written=8760"
"  ->  Result  (cost=20282706.83..20282797.73 rows=72 width=156) (actual time=576042.583..576042.669 rows=1 loops=1)"
"        Buffers: shared hit=33465 read=1877385, temp read=161603140 written=8760"
"        ->  Sort  (cost=20282706.83..20282707.01 rows=72 width=92) (actual time=576042.571..576042.651 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=33465 read=1877385, temp read=161603140 written=8760"
"              ->  GroupAggregate  (cost=10045086.09..20282706.47 rows=72 width=92) (actual time=22629.537..576013.331 rows=25808 loops=1)"
"                    Group Key: a.trip_id, a.start_point, a.end_point"
"                    Buffers: shared hit=33465 read=1877385, temp read=161603140 written=8760"
"                    ->  Nested Loop  (cost=10045086.09..20282703.83 rows=192 width=104) (actual time=11676.580..575255.979 rows=650814 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.003'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.003'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.01'::double precision))"
"                          Rows Removed by Join Filter: 1369385382"
"                          Buffers: shared hit=33465 read=1877385, temp read=161603140 written=8760"
"                          ->  Gather Merge  (cost=10044086.09..10044094.48 rows=72 width=898) (actual time=10853.691..10987.059 rows=37014 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=16506 read=938699, temp read=4382 written=4394"
"                                ->  Sort  (cost=10043086.07..10043086.14 rows=30 width=898) (actual time=10829.779..10870.224 rows=12338 loops=3)"
"                                      Sort Key: a.trip_id, a.start_point, a.end_point"
"                                      Sort Method: external merge  Disk: 10960kB"
"                                      Buffers: shared hit=16506 read=938699, temp read=4382 written=4394"
"                                      Worker 0:  Sort Method: external merge  Disk: 12992kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 11104kB"
"                                      ->  Parallel Seq Scan on trips a  (cost=0.00..10043085.33 rows=30 width=898) (actual time=790.092..10778.392 rows=12338 loops=3)"
"                                            Filter: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800) AND (call_type = 'C'::bpchar) AND (st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 556923"
"                                            Buffers: shared hit=16372 read=938699"
"                          ->  Materialize  (cost=1000.00..10044092.89 rows=72 width=898) (actual time=0.024..7.207 rows=37014 loops=37014)"
"                                Buffers: shared hit=16425 read=938686, temp read=161598758 written=4366"
"                                ->  Gather  (cost=1000.00..10044092.53 rows=72 width=898) (actual time=792.511..11660.540 rows=37014 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=16425 read=938686"
"                                      ->  Parallel Seq Scan on trips b  (cost=0.00..10043085.33 rows=30 width=898) (actual time=787.532..11708.075 rows=12338 loops=3)"
"                                            Filter: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800) AND (call_type = 'C'::bpchar) AND (st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 556923"
"                                            Buffers: shared hit=16425 read=938686"
"Planning:"
"  Buffers: shared read=1"
"Planning Time: 0.868 ms"
"Execution Time: 576047.435 ms"

/* Test Case 2.3: DESCRIBE YOUR CASE HERE */
/* 
Similarity threshold(lower is more similar) = 0.01
Start point distance threshold = 0.003
End point distance threshold = 0.003
Time period from 1370008800 to 1375279200 || 2013 Jun 1st 00:00:00 - 2013 Aug 1st 00:00:00
*/
/* Test Case 2.3 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2
CREATE INDEX idx_trips_timestamp ON trips(timestamp);
CREATE INDEX idx_trips_call_type ON trips USING HASH("call_type");

SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1375279200' 
	AND  a.timestamp > '1370008800'
	AND a.call_type = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1375279200' 
	AND  b.timestamp > '1370008800'
	AND b.call_type = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.003
	AND ST_Distance(a.end_point, b.end_point) < 0.003
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.01
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 "1373499628620000601"	"POINT(-8.612775 41.140395)"	"POINT(-8.608815 41.147118)"	326
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
 "Limit  (cost=979496.92..979498.19 rows=1 width=156) (actual time=553319.914..553320.603 rows=1 loops=1)"
"  Buffers: shared hit=1510 read=64070, temp read=161598772 written=8758"
"  ->  Result  (cost=979496.92..979587.82 rows=72 width=156) (actual time=553319.912..553320.601 rows=1 loops=1)"
"        Buffers: shared hit=1510 read=64070, temp read=161598772 written=8758"
"        ->  Sort  (cost=979496.92..979497.10 rows=72 width=92) (actual time=553319.907..553320.596 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=1510 read=64070, temp read=161598772 written=8758"
"              ->  GroupAggregate  (cost=414833.97..979496.56 rows=72 width=92) (actual time=1162.297..553290.490 rows=25808 loops=1)"
"                    Group Key: a.trip_id"
"                    Buffers: shared hit=1510 read=64070, temp read=161598772 written=8758"
"                    ->  Nested Loop  (cost=414833.97..979494.88 rows=192 width=104) (actual time=1006.625..552597.837 rows=650814 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.003'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.003'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.01'::double precision))"
"                          Rows Removed by Join Filter: 1369311355"
"                          Buffers: shared hit=1510 read=64070, temp read=161598772 written=8758"
"                          ->  Gather Merge  (cost=392481.62..392490.00 rows=72 width=893) (actual time=960.115..1099.903 rows=37013 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=482 read=32049, temp read=4380 written=4392"
"                                ->  Sort  (cost=391481.60..391481.67 rows=30 width=893) (actual time=936.107..971.508 rows=12338 loops=3)"
"                                      Sort Key: a.trip_id"
"                                      Sort Method: external merge  Disk: 12680kB"
"                                      Buffers: shared hit=482 read=32049, temp read=4380 written=4392"
"                                      Worker 0:  Sort Method: external merge  Disk: 10232kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 12128kB"
"                                      ->  Parallel Bitmap Heap Scan on trips a  (cost=21352.35..391480.86 rows=30 width=893) (actual time=147.644..855.611 rows=12338 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800) AND (call_type = 'C'::bpchar))"
"                                            Rows Removed by Index Recheck: 23918"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1229"
"                                            Heap Blocks: exact=10635"
"                                            Buffers: shared hit=468 read=32047"
"                                            ->  BitmapAnd  (cost=21352.35..21352.35 rows=42946 width=0) (actual time=162.012..162.012 rows=0 loops=1)"
"                                                  Buffers: shared hit=3 read=2068"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4352.99 rows=136856 width=0) (actual time=60.661..60.661 rows=142592 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800))"
"                                                        Buffers: shared hit=3 read=774"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type  (cost=0.00..16999.08 rows=535877 width=0) (actual time=100.067..100.067 rows=526656 loops=1)"
"                                                        Index Cond: (call_type = 'C'::bpchar)"
"                                                        Buffers: shared read=1294"
"                          ->  Materialize  (cost=22352.35..392488.42 rows=72 width=893) (actual time=0.004..6.839 rows=37013 loops=37013)"
"                                Buffers: shared hit=509 read=32006, temp read=161594392 written=4366"
"                                ->  Gather  (cost=22352.35..392488.06 rows=72 width=893) (actual time=46.053..118.392 rows=37013 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=509 read=32006"
"                                      ->  Parallel Bitmap Heap Scan on trips b  (cost=21352.35..391480.86 rows=30 width=893) (actual time=38.283..146.945 rows=12338 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800) AND (call_type = 'C'::bpchar))"
"                                            Rows Removed by Index Recheck: 23918"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1229"
"                                            Heap Blocks: exact=5730"
"                                            Buffers: shared hit=509 read=32006"
"                                            ->  BitmapAnd  (cost=21352.35..21352.35 rows=42946 width=0) (actual time=42.702..42.702 rows=0 loops=1)"
"                                                  Buffers: shared hit=3 read=2068"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4352.99 rows=136856 width=0) (actual time=9.048..9.048 rows=142592 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800))"
"                                                        Buffers: shared hit=3 read=774"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type  (cost=0.00..16999.08 rows=535877 width=0) (actual time=32.692..32.692 rows=526656 loops=1)"
"                                                        Index Cond: (call_type = 'C'::bpchar)"
"                                                        Buffers: shared read=1294"
"Planning:"
"  Buffers: shared hit=4 read=6"
"Planning Time: 3.871 ms"
"Execution Time: 553323.703 ms"

/* Test Case 2.3: DESCRIBE YOUR CASE HERE */
/* 
Similarity threshold(lower is more similar) = 0.01
Start point distance threshold = 0.003
End point distance threshold = 0.003
Time period from 1370008800 to 1375279200 || 2013 Jun 1st 00:00:00 - 2013 Aug 1st 00:00:00
*/
/* Test Case 2.3 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3
CREATE INDEX idx_trips_timestamp ON trips(timestamp);
CREATE INDEX idx_trips_call_type_str ON trips USING GIN(call_type_str gin_trgm_ops);

SELECT 
    a.trip_id, 
	ST_AsText(a.start_point) as start_point,
	ST_AsText(a.end_point) as end_point,
	COUNT(DISTINCT b.trip_id) AS total_counts
FROM 
	trips a,
	trips b
WHERE 
    a.trip_id <> b.trip_id 
	AND  a.timestamp < '1375279200' 
	AND  a.timestamp > '1370008800'
	AND a.call_type_str = 'C' 
	AND ST_Length(a.line_geom) > 0.01 
	AND ST_Length(a.line_geom) < 1
	AND ST_IsValid(a.line_geom) 
	
	AND  b.timestamp < '1375279200' 
	AND  b.timestamp > '1370008800'
	AND b.call_type_str = 'C' 
	AND ST_Length(b.line_geom) > 0.01 
	AND ST_Length(b.line_geom) < 1
	AND ST_IsValid(b.line_geom) 
	
	AND ST_Distance(a.start_point, b.start_point) < 0.003
	AND ST_Distance(a.end_point, b.end_point) < 0.003
	AND ST_HausdorffDistance(a.line_geom, b.line_geom) < 0.01
GROUP BY 
	a.trip_id,
	a.start_point,
	a.end_point
ORDER BY
	total_counts DESC
LIMIT 1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 "1373499628620000601"	"POINT(-8.612775 41.140395)"	"POINT(-8.608815 41.147118)"	326
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=954652.82..954654.09 rows=1 width=156) (actual time=558875.137..558875.570 rows=1 loops=1)"
"  Buffers: shared hit=1712 read=61870, temp read=161598773 written=8759"
"  ->  Result  (cost=954652.82..954743.72 rows=72 width=156) (actual time=558875.136..558875.568 rows=1 loops=1)"
"        Buffers: shared hit=1712 read=61870, temp read=161598773 written=8759"
"        ->  Sort  (cost=954652.82..954653.00 rows=72 width=92) (actual time=558875.122..558875.552 rows=1 loops=1)"
"              Sort Key: (count(DISTINCT b.trip_id)) DESC"
"              Sort Method: top-N heapsort  Memory: 25kB"
"              Buffers: shared hit=1712 read=61870, temp read=161598773 written=8759"
"              ->  GroupAggregate  (cost=390338.69..954652.46 rows=72 width=92) (actual time=703.420..558845.680 rows=25808 loops=1)"
"                    Group Key: a.trip_id"
"                    Buffers: shared hit=1712 read=61870, temp read=161598773 written=8759"
"                    ->  Nested Loop  (cost=390338.69..954650.78 rows=192 width=104) (actual time=580.776..558177.030 rows=650814 loops=1)"
"                          Join Filter: (((a.trip_id)::text <> (b.trip_id)::text) AND (st_distance(a.start_point, b.start_point) < '0.003'::double precision) AND (st_distance(a.end_point, b.end_point) < '0.003'::double precision) AND (st_hausdorffdistance(a.line_geom, b.line_geom) < '0.01'::double precision))"
"                          Rows Removed by Join Filter: 1369311355"
"                          Buffers: shared hit=1712 read=61870, temp read=161598773 written=8759"
"                          ->  Gather Merge  (cost=380059.57..380067.95 rows=72 width=893) (actual time=495.486..625.762 rows=37013 loops=1)"
"                                Workers Planned: 2"
"                                Workers Launched: 2"
"                                Buffers: shared hit=588 read=30944, temp read=4381 written=4393"
"                                ->  Sort  (cost=379059.55..379059.62 rows=30 width=893) (actual time=472.590..546.855 rows=12338 loops=3)"
"                                      Sort Key: a.trip_id"
"                                      Sort Method: external merge  Disk: 12872kB"
"                                      Buffers: shared hit=588 read=30944, temp read=4381 written=4393"
"                                      Worker 0:  Sort Method: external merge  Disk: 11168kB"
"                                      Worker 1:  Sort Method: external merge  Disk: 11008kB"
"                                      ->  Parallel Bitmap Heap Scan on trips a  (cost=9279.13..379058.81 rows=30 width=893) (actual time=73.838..436.554 rows=12338 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800) AND ((call_type_str)::text = 'C'::text))"
"                                            Rows Removed by Index Recheck: 23918"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1229"
"                                            Heap Blocks: exact=10879"
"                                            Buffers: shared hit=575 read=30941"
"                                            ->  BitmapAnd  (cost=9279.13..9279.13 rows=42904 width=0) (actual time=91.313..91.313 rows=0 loops=1)"
"                                                  Buffers: shared hit=84 read=988"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4351.67 rows=136724 width=0) (actual time=29.023..29.023 rows=142592 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800))"
"                                                        Buffers: shared hit=3 read=774"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type_str  (cost=0.00..4927.17 rows=535356 width=0) (actual time=61.162..61.162 rows=526656 loops=1)"
"                                                        Index Cond: ((call_type_str)::text = 'C'::text)"
"                                                        Buffers: shared hit=81 read=214"
"                          ->  Materialize  (cost=10279.13..380066.37 rows=72 width=893) (actual time=0.005..6.902 rows=37013 loops=37013)"
"                                Buffers: shared hit=590 read=30926, temp read=161594392 written=4366"
"                                ->  Gather  (cost=10279.13..380066.01 rows=72 width=893) (actual time=84.444..139.077 rows=37013 loops=1)"
"                                      Workers Planned: 2"
"                                      Workers Launched: 2"
"                                      Buffers: shared hit=590 read=30926"
"                                      ->  Parallel Bitmap Heap Scan on trips b  (cost=9279.13..379058.81 rows=30 width=893) (actual time=69.362..151.196 rows=12338 loops=3)"
"                                            Recheck Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800) AND ((call_type_str)::text = 'C'::text))"
"                                            Rows Removed by Index Recheck: 23918"
"                                            Filter: ((st_length(line_geom) > '0.01'::double precision) AND (st_length(line_geom) < '1'::double precision) AND st_isvalid(line_geom))"
"                                            Rows Removed by Filter: 1229"
"                                            Heap Blocks: exact=6189"
"                                            Buffers: shared hit=590 read=30926"
"                                            ->  BitmapAnd  (cost=9279.13..9279.13 rows=42904 width=0) (actual time=81.405..81.405 rows=0 loops=1)"
"                                                  Buffers: shared hit=84 read=988"
"                                                  ->  Bitmap Index Scan on idx_trips_timestamp  (cost=0.00..4351.67 rows=136724 width=0) (actual time=20.966..20.966 rows=142592 loops=1)"
"                                                        Index Cond: ((""timestamp"" < 1375279200) AND (""timestamp"" > 1370008800))"
"                                                        Buffers: shared hit=3 read=774"
"                                                  ->  Bitmap Index Scan on idx_trips_call_type_str  (cost=0.00..4927.17 rows=535356 width=0) (actual time=58.975..58.975 rows=526656 loops=1)"
"                                                        Index Cond: ((call_type_str)::text = 'C'::text)"
"                                                        Buffers: shared hit=81 read=214"
"Planning:"
"  Buffers: shared hit=6 read=6"
"Planning Time: 2.920 ms"
"Execution Time: 558880.572 ms"

/* 
Query Task 3:
DESCRIBE YOUR QUERY TASK HERE 
The location of the k closest taxi call stand to 3 given coordinates.
*/

/* Test Case 3.1: DESCRIBE YOUR CASE HERE */

-- Coordinate 1 = (-8.68 41.14)
-- Coordinate 2 = (-8.68 41)
-- Coordinate 3 = (-8.45 41)
-- k = 3

/* Test Case 3.1 with YOUR_INDEX_METHOD_1 */
-- INDEX = SEQ SCAN
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.68 41.14)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.68 41)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	3
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
40	"POINT(-8.633709 41.041215)"	0.3593488551436407
13	"POINT(-8.633601 41.084703)"	0.3709612044094618
9	"POINT(-8.606133 41.06196)"	0.37184536020163034
 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=14039314.08..14039314.45 rows=3 width=44) (actual time=10730.030..10734.429 rows=3 loops=1)"
"  Buffers: shared hit=5163 read=949466, temp read=1490 written=5017"
"  ->  Unique  (cost=14039314.08..14141007.75 rows=820332 width=44) (actual time=10730.028..10734.427 rows=3 loops=1)"
"        Buffers: shared hit=5163 read=949466, temp read=1490 written=5017"
"        ->  Gather Merge  (cost=14039314.08..14134855.26 rows=820332 width=44) (actual time=10730.028..10734.424 rows=3 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=5163 read=949466, temp read=1490 written=5017"
"              ->  Sort  (cost=14038314.06..14039168.57 rows=341805 width=44) (actual time=10705.549..10705.586 rows=394 loops=3)"
"                    Sort Key: (((st_distance('0101000020E61000005C8FC2F5285C21C052B81E85EB914440'::geometry, start_point) + st_distance('0101000020E61000005C8FC2F5285C21C00000000000804440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 14416kB"
"                    Buffers: shared hit=5163 read=949466, temp read=1490 written=5017"
"                    Worker 0:  Sort Method: external merge  Disk: 12576kB"
"                    Worker 1:  Sort Method: external merge  Disk: 12992kB"
"                    ->  Parallel Seq Scan on trips  (cost=0.00..13996379.87 rows=341805 width=44) (actual time=2.018..10372.252 rows=272262 loops=3)"
"                          Filter: (call_type = 'B'::bpchar)"
"                          Rows Removed by Filter: 296999"
"                          Buffers: shared hit=5017 read=949466"
"Planning Time: 0.121 ms"
"Execution Time: 10734.948 ms"

/* Test Case 3.1: DESCRIBE YOUR CASE HERE */

-- Coordinate 1 = (-8.68 41.14)
-- Coordinate 2 = (-8.68 41)
-- Coordinate 3 = (-8.45 41)
-- k = 3

/* Test Case 3.1 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2
CREATE INDEX idx_trip_call_type ON trips USING HASH("call_type");

SET enable_seqscan = OFF;

SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.68 41.14)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.68 41)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	3

/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 40	"POINT(-8.633709 41.041215)"	0.3593488551436407
13	"POINT(-8.633601 41.084703)"	0.3709612044094618
9	"POINT(-8.606133 41.06196)"	0.37184536020163034
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=14105035.08..14105035.45 rows=3 width=44) (actual time=3152.807..3158.026 rows=3 loops=1)"
"  Buffers: shared hit=41 read=333284, temp read=1367 written=5020"
"  ->  Unique  (cost=14105035.08..14206986.48 rows=822411 width=44) (actual time=3152.794..3158.013 rows=3 loops=1)"
"        Buffers: shared hit=41 read=333284, temp read=1367 written=5020"
"        ->  Gather Merge  (cost=14105035.08..14200818.40 rows=822411 width=44) (actual time=3152.793..3158.009 rows=3 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=41 read=333284, temp read=1367 written=5020"
"              ->  Sort  (cost=14104035.06..14104891.74 rows=342671 width=44) (actual time=3122.888..3122.922 rows=372 loops=3)"
"                    Sort Key: (((st_distance('0101000020E61000005C8FC2F5285C21C052B81E85EB914440'::geometry, start_point) + st_distance('0101000020E61000005C8FC2F5285C21C00000000000804440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 13344kB"
"                    Buffers: shared hit=41 read=333284, temp read=1367 written=5020"
"                    Worker 0:  Sort Method: external merge  Disk: 13352kB"
"                    Worker 1:  Sort Method: external merge  Disk: 13320kB"
"                    ->  Parallel Bitmap Heap Scan on trips  (cost=26293.69..14061990.52 rows=342671 width=44) (actual time=100.486..2969.449 rows=272262 loops=3)"
"                          Recheck Cond: (call_type = 'B'::bpchar)"
"                          Rows Removed by Index Recheck: 228605"
"                          Heap Blocks: exact=10121 lossy=100718"
"                          Buffers: shared read=333279"
"                          ->  Bitmap Index Scan on idx_trip_call_type  (cost=0.00..26088.08 rows=822411 width=0) (actual time=123.943..123.943 rows=816786 loops=1)"
"                                Index Cond: (call_type = 'B'::bpchar)"
"                                Buffers: shared read=2007"
"Planning Time: 0.123 ms"
"Execution Time: 3160.331 ms"
 /* Test Case 3.1: DESCRIBE YOUR CASE HERE */

-- Coordinate 1 = (-8.68 41.14)
-- Coordinate 2 = (-8.68 41)
-- Coordinate 3 = (-8.45 41)
-- k=3

/* Test Case 3.1 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3
CREATE INDEX idx_trip_call_type ON trips USING BRIN (call_type);

SET enable_seqscan = OFF;

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.68 41.14)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.68 41)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	3;

/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 40	"POINT(-8.633709 41.041215)"	0.3593488551436407
13	"POINT(-8.633601 41.084703)"	0.3709612044094618
9	"POINT(-8.606133 41.06196)"	0.37184536020163034
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
 "Limit  (cost=14096193.30..14096193.68 rows=3 width=44) (actual time=10595.819..10607.307 rows=3 loops=1)"
"  Buffers: shared hit=53 read=931983, temp read=1396 written=5022"
"  ->  Unique  (cost=14096193.30..14198144.70 rows=822411 width=44) (actual time=10595.818..10607.304 rows=3 loops=1)"
"        Buffers: shared hit=53 read=931983, temp read=1396 written=5022"
"        ->  Gather Merge  (cost=14096193.30..14191976.62 rows=822411 width=44) (actual time=10595.818..10607.301 rows=3 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=53 read=931983, temp read=1396 written=5022"
"              ->  Sort  (cost=14095193.28..14096049.96 rows=342671 width=44) (actual time=10561.998..10562.032 rows=364 loops=3)"
"                    Sort Key: (((st_distance('0101000020E61000005C8FC2F5285C21C052B81E85EB914440'::geometry, start_point) + st_distance('0101000020E61000005C8FC2F5285C21C00000000000804440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 13576kB"
"                    Buffers: shared hit=53 read=931983, temp read=1396 written=5022"
"                    Worker 0:  Sort Method: external merge  Disk: 13360kB"
"                    Worker 1:  Sort Method: external merge  Disk: 13080kB"
"                    ->  Parallel Bitmap Heap Scan on trips  (cost=533.23..14053148.74 rows=342671 width=44) (actual time=29.364..10364.519 rows=272262 loops=3)"
"                          Recheck Cond: (call_type = 'B'::bpchar)"
"                          Rows Removed by Index Recheck: 296885"
"                          Heap Blocks: lossy=131255"
"                          Buffers: shared hit=11 read=931979"
"                          ->  Bitmap Index Scan on idx_trip_call_type  (cost=0.00..327.62 rows=1707782 width=0) (actual time=55.209..55.209 rows=9319550 loops=1)"
"                                Index Cond: (call_type = 'B'::bpchar)"
"                                Buffers: shared hit=11 read=24"
"Planning:"
"  Buffers: shared hit=1"
"Planning Time: 0.126 ms"
"Execution Time: 10608.376 ms"

 /* Test Case 3.2: DESCRIBE YOUR CASE HERE */

-- Coordinate 1 = (-8.68 41.25) || Francisco Sá Carneiro Airport
-- Coordinate 2 = (-8.7 41.2) || Leça da Palmeira
-- Coordinate 3 = (-8.45 41) || Cândido dos Reis railway station
-- k = 5
 
/* Test Case 3.2 with YOUR_INDEX_METHOD_1 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.68 41.25)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.7 41.2)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	5
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 62	"POINT(-8.671635 41.200713)"	0.37737711530034396
15	"POINT(-8.6823 41.225112)"	0.37919610760253764
47	"POINT(-8.691498 41.218533)"	0.3795880898842628
46	"POINT(-8.665308 41.203764)"	0.37985080403059734
7	"POINT(-8.683785 41.226354)"	0.38029969161080546
 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=14072467.49..14072468.11 rows=5 width=44) (actual time=11948.562..11952.312 rows=5 loops=1)"
"  Buffers: shared hit=16097 read=938532, temp read=1490 written=5019"
"  ->  Unique  (cost=14072467.49..14174418.89 rows=822411 width=44) (actual time=11948.561..11952.310 rows=5 loops=1)"
"        Buffers: shared hit=16097 read=938532, temp read=1490 written=5019"
"        ->  Gather Merge  (cost=14072467.49..14168250.81 rows=822411 width=44) (actual time=11948.560..11952.307 rows=5 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=16097 read=938532, temp read=1490 written=5019"
"              ->  Sort  (cost=14071467.47..14072324.15 rows=342671 width=44) (actual time=11924.610..11924.675 rows=683 loops=3)"
"                    Sort Key: (((st_distance('0101000020E61000005C8FC2F5285C21C00000000000A04440'::geometry, start_point) + st_distance('0101000020E610000066666666666621C09A99999999994440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 13240kB"
"                    Buffers: shared hit=16097 read=938532, temp read=1490 written=5019"
"                    Worker 0:  Sort Method: external merge  Disk: 12304kB"
"                    Worker 1:  Sort Method: external merge  Disk: 14456kB"
"                    ->  Parallel Seq Scan on trips  (cost=0.00..14029422.93 rows=342671 width=44) (actual time=2.581..11493.394 rows=272262 loops=3)"
"                          Filter: (call_type = 'B'::bpchar)"
"                          Rows Removed by Filter: 296999"
"                          Buffers: shared hit=15951 read=938532"
"Planning Time: 0.111 ms"
"Execution Time: 11953.208 ms"


/* Test Case 3.2: DESCRIBE YOUR CASE HERE */

-- Coordinate 1 = (-8.68 41.25) || Francisco Sá Carneiro Airport
-- Coordinate 2 = (-8.7 41.2) || Leça da Palmeira
-- Coordinate 3 = (-8.45 41) || Cândido dos Reis railway station
-- k = 5


/* Test Case 3.2 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2
CREATE INDEX idx_trip_call_type ON trips USING HASH("call_type");
SET enable_seqscan = OFF;
SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.68 41.25)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.7 41.2)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	5;

/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 62	"POINT(-8.671635 41.200713)"	0.37737711530034396
15	"POINT(-8.6823 41.225112)"	0.37919610760253764
47	"POINT(-8.691498 41.218533)"	0.3795880898842628
46	"POINT(-8.665308 41.203764)"	0.37985080403059734
7	"POINT(-8.683785 41.226354)"	0.38029969161080546
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=14105035.08..14105035.70 rows=5 width=44) (actual time=2982.234..2986.805 rows=5 loops=1)"
"  Buffers: shared hit=41 read=333284, temp read=1393 written=5021"
"  ->  Unique  (cost=14105035.08..14206986.48 rows=822411 width=44) (actual time=2982.232..2986.803 rows=5 loops=1)"
"        Buffers: shared hit=41 read=333284, temp read=1393 written=5021"
"        ->  Gather Merge  (cost=14105035.08..14200818.40 rows=822411 width=44) (actual time=2982.232..2986.799 rows=5 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=41 read=333284, temp read=1393 written=5021"
"              ->  Sort  (cost=14104035.06..14104891.74 rows=342671 width=44) (actual time=2947.640..2947.676 rows=368 loops=3)"
"                    Sort Key: (((st_distance('0101000020E61000005C8FC2F5285C21C00000000000A04440'::geometry, start_point) + st_distance('0101000020E610000066666666666621C09A99999999994440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 13560kB"
"                    Buffers: shared hit=41 read=333284, temp read=1393 written=5021"
"                    Worker 0:  Sort Method: external merge  Disk: 13104kB"
"                    Worker 1:  Sort Method: external merge  Disk: 13352kB"
"                    ->  Parallel Bitmap Heap Scan on trips  (cost=26293.69..14061990.52 rows=342671 width=44) (actual time=124.935..2790.749 rows=272262 loops=3)"
"                          Recheck Cond: (call_type = 'B'::bpchar)"
"                          Rows Removed by Index Recheck: 228605"
"                          Heap Blocks: exact=10787 lossy=101480"
"                          Buffers: shared read=333279"
"                          ->  Bitmap Index Scan on idx_trip_call_type  (cost=0.00..26088.08 rows=822411 width=0) (actual time=144.500..144.500 rows=816786 loops=1)"
"                                Index Cond: (call_type = 'B'::bpchar)"
"                                Buffers: shared read=2007"
"Planning Time: 0.136 ms"
"Execution Time: 2987.762 ms"

 /* Test Case 3.2: DESCRIBE YOUR CASE HERE 
Coordinate 1 = (-8.68 41.25) || Francisco Sá Carneiro Airport
Coordinate 2 = (-8.7 41.2) || Leça da Palmeira
Coordinate 3 = (-8.45 41) || Cândido dos Reis railway station
k = 5
 */
/* Test Case 3.2 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3
CREATE INDEX idx_trip_call_type ON trips USING BRIN (call_type);

SET enable_seqscan = OFF;

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.68 41.25)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.7 41.2)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	5;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 62	"POINT(-8.671635 41.200713)"	0.37737711530034396
15	"POINT(-8.6823 41.225112)"	0.37919610760253764
47	"POINT(-8.691498 41.218533)"	0.3795880898842628
46	"POINT(-8.665308 41.203764)"	0.37985080403059734
7	"POINT(-8.683785 41.226354)"	0.38029969161080546
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
 "Limit  (cost=14096193.30..14096193.92 rows=5 width=44) (actual time=10534.185..10543.529 rows=5 loops=1)"
"  Buffers: shared hit=53 read=931983, temp read=1414 written=5021"
"  ->  Unique  (cost=14096193.30..14198144.70 rows=822411 width=44) (actual time=10534.184..10543.527 rows=5 loops=1)"
"        Buffers: shared hit=53 read=931983, temp read=1414 written=5021"
"        ->  Gather Merge  (cost=14096193.30..14191976.62 rows=822411 width=44) (actual time=10534.183..10543.524 rows=5 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=53 read=931983, temp read=1414 written=5021"
"              ->  Sort  (cost=14095193.28..14096049.96 rows=342671 width=44) (actual time=10509.837..10509.884 rows=379 loops=3)"
"                    Sort Key: (((st_distance('0101000020E61000005C8FC2F5285C21C00000000000A04440'::geometry, start_point) + st_distance('0101000020E610000066666666666621C09A99999999994440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 13672kB"
"                    Buffers: shared hit=53 read=931983, temp read=1414 written=5021"
"                    Worker 0:  Sort Method: external merge  Disk: 12936kB"
"                    Worker 1:  Sort Method: external merge  Disk: 13400kB"
"                    ->  Parallel Bitmap Heap Scan on trips  (cost=533.23..14053148.74 rows=342671 width=44) (actual time=24.194..10274.002 rows=272262 loops=3)"
"                          Recheck Cond: (call_type = 'B'::bpchar)"
"                          Rows Removed by Index Recheck: 296885"
"                          Heap Blocks: lossy=132104"
"                          Buffers: shared hit=11 read=931979"
"                          ->  Bitmap Index Scan on idx_trip_call_type  (cost=0.00..327.62 rows=1707782 width=0) (actual time=43.590..43.591 rows=9319550 loops=1)"
"                                Index Cond: (call_type = 'B'::bpchar)"
"                                Buffers: shared hit=11 read=24"
"Planning:"
"  Buffers: shared hit=1"
"Planning Time: 0.124 ms"
"Execution Time: 10545.659 ms"


/* Test Case 3.3: DESCRIBE YOUR CASE HERE */

-- Coordinate 1 = (-8.58 40.98) || Museu do Papel
-- Coordinate 2 = (-8.635 40.925) || Base Aérea N.º 8
-- Coordinate 3 = (-8.649 40.973) || Praia de Paramos
-- k = 1

/* Test Case 3.3 with YOUR_INDEX_METHOD_1 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_1
SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.58 40.98)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.7 41.2)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	1
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
9	"POINT(-8.604315 41.061465)"	0.41948920372740695
 /* QUERY PLAN:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=14072467.49..14072467.62 rows=1 width=44) (actual time=11202.480..11206.086 rows=1 loops=1)"
"  Buffers: shared hit=16093 read=938536, temp read=1490 written=5019"
"  ->  Unique  (cost=14072467.49..14174418.89 rows=822411 width=44) (actual time=11202.479..11206.083 rows=1 loops=1)"
"        Buffers: shared hit=16093 read=938536, temp read=1490 written=5019"
"        ->  Gather Merge  (cost=14072467.49..14168250.81 rows=822411 width=44) (actual time=11202.479..11206.083 rows=1 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=16093 read=938536, temp read=1490 written=5019"
"              ->  Sort  (cost=14071467.47..14072324.15 rows=342671 width=44) (actual time=11153.853..11153.887 rows=395 loops=3)"
"                    Sort Key: (((st_distance('0101000020E6100000295C8FC2F52821C03D0AD7A3707D4440'::geometry, start_point) + st_distance('0101000020E610000066666666666621C09A99999999994440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 14536kB"
"                    Buffers: shared hit=16093 read=938536, temp read=1490 written=5019"
"                    Worker 0:  Sort Method: external merge  Disk: 13000kB"
"                    Worker 1:  Sort Method: external merge  Disk: 12464kB"
"                    ->  Parallel Seq Scan on trips  (cost=0.00..14029422.93 rows=342671 width=44) (actual time=1.987..10792.191 rows=272262 loops=3)"
"                          Filter: (call_type = 'B'::bpchar)"
"                          Rows Removed by Filter: 296999"
"                          Buffers: shared hit=15947 read=938536"
"Planning Time: 0.119 ms"
"Execution Time: 11212.041 ms"
/* Test Case 3.3: DESCRIBE YOUR CASE HERE */

-- Coordinate 1 = (-8.58 40.98) || Museu do Papel
-- Coordinate 2 = (-8.635 40.925) || Base Aérea N.º 8
-- Coordinate 3 = (-8.649 40.973) || Praia de Paramos
-- k = 1

/* Test Case 3.3 with YOUR_INDEX_METHOD_2 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_2
CREATE INDEX idx_trip_call_type ON trips USING HASH("call_type");

SET enable_seqscan = OFF;

EXPLAIN (ANALYZE ON, BUFFERS ON)

SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.58 40.98)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.7 41.2)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	1;
/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 9	"POINT(-8.604315 41.061465)"	0.41948920372740695
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
"Limit  (cost=14105035.08..14105035.21 rows=1 width=44) (actual time=2720.926..2725.677 rows=1 loops=1)"
"  Buffers: shared hit=2113 read=331213 written=1877, temp read=1400 written=5020"
"  ->  Unique  (cost=14105035.08..14206986.48 rows=822411 width=44) (actual time=2720.925..2725.676 rows=1 loops=1)"
"        Buffers: shared hit=2113 read=331213 written=1877, temp read=1400 written=5020"
"        ->  Gather Merge  (cost=14105035.08..14200818.40 rows=822411 width=44) (actual time=2720.925..2725.675 rows=1 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=2113 read=331213 written=1877, temp read=1400 written=5020"
"              ->  Sort  (cost=14104035.06..14104891.74 rows=342671 width=44) (actual time=2697.331..2697.393 rows=683 loops=3)"
"                    Sort Key: (((st_distance('0101000020E6100000295C8FC2F52821C03D0AD7A3707D4440'::geometry, start_point) + st_distance('0101000020E610000066666666666621C09A99999999994440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 13048kB"
"                    Buffers: shared hit=2113 read=331213 written=1877, temp read=1400 written=5020"
"                    Worker 0:  Sort Method: external merge  Disk: 13616kB"
"                    Worker 1:  Sort Method: external merge  Disk: 13344kB"
"                    ->  Parallel Bitmap Heap Scan on trips  (cost=26293.69..14061990.52 rows=342671 width=44) (actual time=64.245..2561.544 rows=272262 loops=3)"
"                          Recheck Cond: (call_type = 'B'::bpchar)"
"                          Rows Removed by Index Recheck: 228605"
"                          Heap Blocks: exact=11275 lossy=97065"
"                          Buffers: shared hit=2067 read=331213 written=1877"
"                          ->  Bitmap Index Scan on idx_trip_call_type  (cost=0.00..26088.08 rows=822411 width=0) (actual time=79.110..79.111 rows=816786 loops=1)"
"                                Index Cond: (call_type = 'B'::bpchar)"
"                                Buffers: shared hit=2008"
"Planning:"
"  Buffers: shared hit=15 dirtied=2"
"Planning Time: 0.689 ms"
"Execution Time: 2727.218 ms"

/* Test Case 3.3: DESCRIBE YOUR CASE HERE */

-- Coordinate 1 = (-8.58 40.98) || Museu do Papel
-- Coordinate 2 = (-8.635 40.925) || Base Aérea N.º 8
-- Coordinate 3 = (-8.649 40.973) || Praia de Paramos
-- k = 1

/* Test Case 3.3 with YOUR_INDEX_METHOD_3 */
-- YOUR SQL CODE HERE WITH YOUR_INDEX_METHOD_3
CREATE INDEX idx_trip_call_type ON trips USING BRIN (call_type);

EXPLAIN (ANALYZE ON, BUFFERS ON)

SET enable_seqscan = OFF;

SELECT
	DISTINCT origin_stand AS stand_id,
	ST_AsText(start_point) AS location,
	ST_DISTANCE('SRID=4326;POINT(-8.58 40.98)'::geometry, start_point) + 
	ST_DISTANCE('SRID=4326;POINT(-8.7 41.2)'::geometry, start_point) +
	ST_DISTANCE('SRID=4326;POINT(-8.45 41)'::geometry, start_point) AS total_dist
FROM 
	trips
WHERE
	call_type = 'B'
ORDER BY 
	total_dist ASC
LIMIT
	1;

/* Outputs:
COPT PASTE THE RETURNED OUTPUTS HERE
 */
 9	"POINT(-8.604315 41.061465)"	0.41948920372740695
 /* Outputs:
COPT PASTE THE RETURNED QUERY PLAN HERE
 */
 "Limit  (cost=14096193.30..14096193.43 rows=1 width=44) (actual time=11562.267..11573.803 rows=1 loops=1)"
"  Buffers: shared hit=53 read=931983, temp read=1490 written=5019"
"  ->  Unique  (cost=14096193.30..14198144.70 rows=822411 width=44) (actual time=11562.265..11573.801 rows=1 loops=1)"
"        Buffers: shared hit=53 read=931983, temp read=1490 written=5019"
"        ->  Gather Merge  (cost=14096193.30..14191976.62 rows=822411 width=44) (actual time=11562.265..11573.800 rows=1 loops=1)"
"              Workers Planned: 2"
"              Workers Launched: 2"
"              Buffers: shared hit=53 read=931983, temp read=1490 written=5019"
"              ->  Sort  (cost=14095193.28..14096049.96 rows=342671 width=44) (actual time=11529.840..11529.873 rows=366 loops=3)"
"                    Sort Key: (((st_distance('0101000020E6100000295C8FC2F52821C03D0AD7A3707D4440'::geometry, start_point) + st_distance('0101000020E610000066666666666621C09A99999999994440'::geometry, start_point)) + st_distance('0101000020E61000006666666666E620C00000000000804440'::geometry, start_point))), origin_stand, (st_astext(start_point))"
"                    Sort Method: external merge  Disk: 14032kB"
"                    Buffers: shared hit=53 read=931983, temp read=1490 written=5019"
"                    Worker 0:  Sort Method: external merge  Disk: 13144kB"
"                    Worker 1:  Sort Method: external merge  Disk: 12824kB"
"                    ->  Parallel Bitmap Heap Scan on trips  (cost=533.23..14053148.74 rows=342671 width=44) (actual time=23.491..11215.747 rows=272262 loops=3)"
"                          Recheck Cond: (call_type = 'B'::bpchar)"
"                          Rows Removed by Index Recheck: 296885"
"                          Heap Blocks: lossy=135857"
"                          Buffers: shared hit=11 read=931979"
"                          ->  Bitmap Index Scan on idx_trip_call_type  (cost=0.00..327.62 rows=1707782 width=0) (actual time=44.882..44.882 rows=9319550 loops=1)"
"                                Index Cond: (call_type = 'B'::bpchar)"
"                                Buffers: shared hit=11 read=24"
"Planning:"
"  Buffers: shared hit=1"
"Planning Time: 0.128 ms"
"Execution Time: 11576.373 ms"

